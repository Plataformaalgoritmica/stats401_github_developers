{"hirable": null, "public_repos": 15, "is_suspicious": false, "updated_at": "2018-07-23 19:32:48", "id": 5578, "blog": "", "followers": 16, "location": "Greenville, SC", "follower_list": [127, 3238, 5594, 7626, 43209, 494060, 3967313, 1214129, 565743, 5877145, 20617000, 22138288, 443922, 1424442, 7304741, 6195843], "type": "User", "commit_list": [{"repo_id": 75493719, "repo_owner_id": 24359841, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "The Good Programming Language", "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "goodlang/good"}, {"repo_id": 75493719, "repo_owner_id": 24359841, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "The Good Programming Language", "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "goodlang/good"}, {"repo_id": 75493719, "repo_owner_id": 24359841, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "The Good Programming Language", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "goodlang/good"}, {"repo_id": 75493719, "repo_owner_id": 24359841, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "The Good Programming Language", "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "goodlang/good"}, {"repo_id": 128634255, "repo_owner_id": 17806342, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "[Updated on 2018-04-09] The exactly separated `encoding/json` package from [golang/go/master/encoding/json](https://github.com/golang/go/tree/master/src/encoding/json) by [git-filter-branch](https://git-scm.com/docs/git-filter-branch).", "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "zhanbei/golang-encoding-json"}, {"repo_id": 128634255, "repo_owner_id": 17806342, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "[Updated on 2018-04-09] The exactly separated `encoding/json` package from [golang/go/master/encoding/json](https://github.com/golang/go/tree/master/src/encoding/json) by [git-filter-branch](https://git-scm.com/docs/git-filter-branch).", "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "zhanbei/golang-encoding-json"}, {"repo_id": 128634255, "repo_owner_id": 17806342, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "[Updated on 2018-04-09] The exactly separated `encoding/json` package from [golang/go/master/encoding/json](https://github.com/golang/go/tree/master/src/encoding/json) by [git-filter-branch](https://git-scm.com/docs/git-filter-branch).", "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "zhanbei/golang-encoding-json"}, {"repo_id": 53542159, "repo_owner_id": 9857112, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "gaochenyue/go"}, {"repo_id": 53542159, "repo_owner_id": 9857112, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "gaochenyue/go"}, {"repo_id": 53542159, "repo_owner_id": 9857112, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "gaochenyue/go"}, {"repo_id": 53542159, "repo_owner_id": 9857112, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "gaochenyue/go"}, {"repo_id": 60955501, "repo_owner_id": 1046455, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "OlingCat/Go-zh"}, {"repo_id": 60955501, "repo_owner_id": 1046455, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "OlingCat/Go-zh"}, {"repo_id": 60955501, "repo_owner_id": 1046455, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "OlingCat/Go-zh"}, {"repo_id": 60955501, "repo_owner_id": 1046455, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "OlingCat/Go-zh"}, {"repo_id": 91277066, "repo_owner_id": 28636626, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "ideacatalyst/Golang"}, {"repo_id": 91277066, "repo_owner_id": 28636626, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "ideacatalyst/Golang"}, {"repo_id": 91277066, "repo_owner_id": 28636626, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "ideacatalyst/Golang"}, {"repo_id": 91277066, "repo_owner_id": 28636626, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "ideacatalyst/Golang"}, {"repo_id": 22002175, "repo_owner_id": 3979584, "commit_at": "2015-02-25 10:25:17-05:00", "committer_id": 5578, "message": "Change SourceImports to ImportFromBinary to follow go/loader updates.\n\nReference breaking change in go/loader API\ngolang/tools@69db398fe0e69396984e3967724820c1f631e971\n\nIssue sourcegraph/srclib-go#30", "repo_description": "Go toolchain for srclib", "generate_at": "2015-02-25 10:21:39-05:00", "author_id": 5578, "repo_name": "sourcegraph/srclib-go"}, {"repo_id": 100975240, "repo_owner_id": 31217781, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "tomaslither/go"}, {"repo_id": 100975240, "repo_owner_id": 31217781, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "tomaslither/go"}, {"repo_id": 100975240, "repo_owner_id": 31217781, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "tomaslither/go"}, {"repo_id": 100975240, "repo_owner_id": 31217781, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "tomaslither/go"}, {"repo_id": 106999065, "repo_owner_id": 13483988, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "corso75/golang"}, {"repo_id": 106999065, "repo_owner_id": 13483988, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "corso75/golang"}, {"repo_id": 106999065, "repo_owner_id": 13483988, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "corso75/golang"}, {"repo_id": 106999065, "repo_owner_id": 13483988, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "corso75/golang"}, {"repo_id": 124183, "repo_owner_id": 6789, "commit_at": "2013-05-20 04:55:32-07:00", "committer_id": 5578, "message": "Merge pull request #1 from T145/master\n\nCleaning", "repo_description": "AnyQueue is a queue abstraction library.", "generate_at": "2013-05-20 04:55:32-07:00", "author_id": 5578, "repo_name": "gnoso/anyqueue"}, {"repo_id": 11109050, "repo_owner_id": 6789, "commit_at": "2013-11-05 09:02:20-05:00", "committer_id": 5578, "message": "Remove dart sdk since it doesn't work with heroku glibc", "repo_description": "Custom Heroku buildpack for Go", "generate_at": "2013-11-05 09:02:20-05:00", "author_id": 5578, "repo_name": "gnoso/heroku-buildpack-go"}, {"repo_id": 11109050, "repo_owner_id": 6789, "commit_at": "2013-11-05 08:58:06-05:00", "committer_id": 5578, "message": "make sure dart binaries are executable", "repo_description": "Custom Heroku buildpack for Go", "generate_at": "2013-11-05 08:58:06-05:00", "author_id": 5578, "repo_name": "gnoso/heroku-buildpack-go"}, {"repo_id": 11109050, "repo_owner_id": 6789, "commit_at": "2013-11-05 08:54:38-05:00", "committer_id": 5578, "message": "use jar to unpack archive", "repo_description": "Custom Heroku buildpack for Go", "generate_at": "2013-11-05 08:54:38-05:00", "author_id": 5578, "repo_name": "gnoso/heroku-buildpack-go"}, {"repo_id": 11109050, "repo_owner_id": 6789, "commit_at": "2013-11-05 08:46:09-05:00", "committer_id": 5578, "message": "tweak unzip cmd.", "repo_description": "Custom Heroku buildpack for Go", "generate_at": "2013-11-05 08:46:09-05:00", "author_id": 5578, "repo_name": "gnoso/heroku-buildpack-go"}, {"repo_id": 11109050, "repo_owner_id": 6789, "commit_at": "2013-11-05 08:39:39-05:00", "committer_id": 5578, "message": "Add dart sdk to the buildpack.", "repo_description": "Custom Heroku buildpack for Go", "generate_at": "2013-11-05 08:39:39-05:00", "author_id": 5578, "repo_name": "gnoso/heroku-buildpack-go"}, {"repo_id": 11109050, "repo_owner_id": 6789, "commit_at": "2013-07-02 23:00:03-04:00", "committer_id": 5578, "message": "Move dependencies into the build script", "repo_description": "Custom Heroku buildpack for Go", "generate_at": "2013-07-02 23:00:03-04:00", "author_id": 5578, "repo_name": "gnoso/heroku-buildpack-go"}, {"repo_id": 11109050, "repo_owner_id": 6789, "commit_at": "2013-07-02 22:43:01-04:00", "committer_id": 5578, "message": "Scope the go get command to included packages", "repo_description": "Custom Heroku buildpack for Go", "generate_at": "2013-07-02 22:43:01-04:00", "author_id": 5578, "repo_name": "gnoso/heroku-buildpack-go"}, {"repo_id": 11109050, "repo_owner_id": 6789, "commit_at": "2013-07-02 08:49:23-04:00", "committer_id": 5578, "message": "Update go dependencies script", "repo_description": "Custom Heroku buildpack for Go", "generate_at": "2013-07-02 08:49:23-04:00", "author_id": 5578, "repo_name": "gnoso/heroku-buildpack-go"}, {"repo_id": 11109050, "repo_owner_id": 6789, "commit_at": "2013-07-02 08:44:39-04:00", "committer_id": 5578, "message": "go get dependencies", "repo_description": "Custom Heroku buildpack for Go", "generate_at": "2013-07-02 08:44:39-04:00", "author_id": 5578, "repo_name": "gnoso/heroku-buildpack-go"}, {"repo_id": 11109050, "repo_owner_id": 6789, "commit_at": "2013-07-02 08:40:45-04:00", "committer_id": 5578, "message": "Add back godir", "repo_description": "Custom Heroku buildpack for Go", "generate_at": "2013-07-02 08:40:45-04:00", "author_id": 5578, "repo_name": "gnoso/heroku-buildpack-go"}, {"repo_id": 11109050, "repo_owner_id": 6789, "commit_at": "2013-07-02 08:19:55-04:00", "committer_id": 5578, "message": "Clean compile script", "repo_description": "Custom Heroku buildpack for Go", "generate_at": "2013-07-02 08:19:55-04:00", "author_id": 5578, "repo_name": "gnoso/heroku-buildpack-go"}, {"repo_id": 11109050, "repo_owner_id": 6789, "commit_at": "2013-07-02 08:09:10-04:00", "committer_id": 5578, "message": "run build from original dir", "repo_description": "Custom Heroku buildpack for Go", "generate_at": "2013-07-02 08:09:10-04:00", "author_id": 5578, "repo_name": "gnoso/heroku-buildpack-go"}, {"repo_id": 11109050, "repo_owner_id": 6789, "commit_at": "2013-07-02 08:04:35-04:00", "committer_id": 5578, "message": "testing 2", "repo_description": "Custom Heroku buildpack for Go", "generate_at": "2013-07-02 08:04:35-04:00", "author_id": 5578, "repo_name": "gnoso/heroku-buildpack-go"}, {"repo_id": 11109050, "repo_owner_id": 6789, "commit_at": "2013-07-02 08:01:45-04:00", "committer_id": 5578, "message": "Testing", "repo_description": "Custom Heroku buildpack for Go", "generate_at": "2013-07-02 08:01:45-04:00", "author_id": 5578, "repo_name": "gnoso/heroku-buildpack-go"}, {"repo_id": 11109050, "repo_owner_id": 6789, "commit_at": "2013-07-02 07:57:59-04:00", "committer_id": 5578, "message": "run .gobuild from local dir", "repo_description": "Custom Heroku buildpack for Go", "generate_at": "2013-07-02 07:57:59-04:00", "author_id": 5578, "repo_name": "gnoso/heroku-buildpack-go"}, {"repo_id": 11109050, "repo_owner_id": 6789, "commit_at": "2013-07-02 07:56:00-04:00", "committer_id": 5578, "message": "don't use the .godir, use local build dir instead.", "repo_description": "Custom Heroku buildpack for Go", "generate_at": "2013-07-02 07:56:00-04:00", "author_id": 5578, "repo_name": "gnoso/heroku-buildpack-go"}, {"repo_id": 11109050, "repo_owner_id": 6789, "commit_at": "2013-07-02 07:52:30-04:00", "committer_id": 5578, "message": "compile user specified script.", "repo_description": "Custom Heroku buildpack for Go", "generate_at": "2013-07-02 07:52:30-04:00", "author_id": 5578, "repo_name": "gnoso/heroku-buildpack-go"}, {"repo_id": 11109050, "repo_owner_id": 6789, "commit_at": "2013-07-01 18:33:32-04:00", "committer_id": 5578, "message": "Initial build-pack commit", "repo_description": "Custom Heroku buildpack for Go", "generate_at": "2013-07-01 18:33:32-04:00", "author_id": 5578, "repo_name": "gnoso/heroku-buildpack-go"}, {"repo_id": 87120864, "repo_owner_id": 1041642, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "gleroi/go"}, {"repo_id": 87120864, "repo_owner_id": 1041642, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "gleroi/go"}, {"repo_id": 87120864, "repo_owner_id": 1041642, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "gleroi/go"}, {"repo_id": 87120864, "repo_owner_id": 1041642, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "gleroi/go"}, {"repo_id": 109023924, "repo_owner_id": 32309139, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "schintakinditesla/golang_git"}, {"repo_id": 109023924, "repo_owner_id": 32309139, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "schintakinditesla/golang_git"}, {"repo_id": 109023924, "repo_owner_id": 32309139, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "schintakinditesla/golang_git"}, {"repo_id": 109023924, "repo_owner_id": 32309139, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "schintakinditesla/golang_git"}, {"repo_id": 119331280, "repo_owner_id": 7344921, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "SwanSpouse/golang_source_code"}, {"repo_id": 119331280, "repo_owner_id": 7344921, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "SwanSpouse/golang_source_code"}, {"repo_id": 119331280, "repo_owner_id": 7344921, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "SwanSpouse/golang_source_code"}, {"repo_id": 119331280, "repo_owner_id": 7344921, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "SwanSpouse/golang_source_code"}, {"repo_id": 123887875, "repo_owner_id": 23002587, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "Helflym/golangAIX"}, {"repo_id": 123887875, "repo_owner_id": 23002587, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "Helflym/golangAIX"}, {"repo_id": 123887875, "repo_owner_id": 23002587, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "Helflym/golangAIX"}, {"repo_id": 123887875, "repo_owner_id": 23002587, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "Helflym/golangAIX"}, {"repo_id": 270064, "repo_owner_id": 6789, "commit_at": "2013-05-28 13:48:03-07:00", "committer_id": 5578, "message": "Merge pull request #9 from T145/master\n\nUpdated license statement", "repo_description": "A remote factory tool for Rails.", "generate_at": "2013-05-28 13:48:03-07:00", "author_id": 5578, "repo_name": "gnoso/fafactory"}, {"repo_id": 270064, "repo_owner_id": 6789, "commit_at": "2013-05-15 03:51:34-07:00", "committer_id": 5578, "message": "Merge pull request #8 from T145/master\n\nSome extra fun!", "repo_description": "A remote factory tool for Rails.", "generate_at": "2013-05-15 03:51:34-07:00", "author_id": 5578, "repo_name": "gnoso/fafactory"}, {"repo_id": 270064, "repo_owner_id": 6789, "commit_at": "2013-05-10 14:36:49-07:00", "committer_id": 5578, "message": "Merge pull request #7 from T145/master\n\nQuick fixup", "repo_description": "A remote factory tool for Rails.", "generate_at": "2013-05-10 14:36:49-07:00", "author_id": 5578, "repo_name": "gnoso/fafactory"}, {"repo_id": 270064, "repo_owner_id": 6789, "commit_at": "2013-04-15 05:10:18-07:00", "committer_id": 5578, "message": "Merge pull request #6 from T145/master\n\nMerged pull request from T145", "repo_description": "A remote factory tool for Rails.", "generate_at": "2013-04-15 05:10:18-07:00", "author_id": 5578, "repo_name": "gnoso/fafactory"}, {"repo_id": 63503538, "repo_owner_id": 2621, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "bradfitz/go-mirror-test"}, {"repo_id": 63503538, "repo_owner_id": 2621, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "bradfitz/go-mirror-test"}, {"repo_id": 63503538, "repo_owner_id": 2621, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "bradfitz/go-mirror-test"}, {"repo_id": 63503538, "repo_owner_id": 2621, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "bradfitz/go-mirror-test"}, {"repo_id": 46303112, "repo_owner_id": 1606892, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "An infected Go compiler that adds a backdoor ala Ken Thompson", "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "rachtsingh/gogojuice"}, {"repo_id": 46303112, "repo_owner_id": 1606892, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "An infected Go compiler that adds a backdoor ala Ken Thompson", "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "rachtsingh/gogojuice"}, {"repo_id": 46303112, "repo_owner_id": 1606892, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "An infected Go compiler that adds a backdoor ala Ken Thompson", "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "rachtsingh/gogojuice"}, {"repo_id": 46303112, "repo_owner_id": 1606892, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "An infected Go compiler that adds a backdoor ala Ken Thompson", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "rachtsingh/gogojuice"}, {"repo_id": 68859256, "repo_owner_id": 8528975, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Prototype implementation of operator methods (fork of https://github.com/golang/go)", "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "griesemer/dotGo2016"}, {"repo_id": 68859256, "repo_owner_id": 8528975, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Prototype implementation of operator methods (fork of https://github.com/golang/go)", "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "griesemer/dotGo2016"}, {"repo_id": 68859256, "repo_owner_id": 8528975, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Prototype implementation of operator methods (fork of https://github.com/golang/go)", "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "griesemer/dotGo2016"}, {"repo_id": 68859256, "repo_owner_id": 8528975, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "Prototype implementation of operator methods (fork of https://github.com/golang/go)", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "griesemer/dotGo2016"}, {"repo_id": 74780733, "repo_owner_id": 4228884, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "chisleu/go"}, {"repo_id": 74780733, "repo_owner_id": 4228884, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "chisleu/go"}, {"repo_id": 74780733, "repo_owner_id": 4228884, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "chisleu/go"}, {"repo_id": 74780733, "repo_owner_id": 4228884, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "chisleu/go"}, {"repo_id": 86783841, "repo_owner_id": 8953091, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "hyn6014/go"}, {"repo_id": 86783841, "repo_owner_id": 8953091, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "hyn6014/go"}, {"repo_id": 86783841, "repo_owner_id": 8953091, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "hyn6014/go"}, {"repo_id": 86783841, "repo_owner_id": 8953091, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "hyn6014/go"}, {"repo_id": 126248252, "repo_owner_id": 39150453, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "DARA-Project/GoDist"}, {"repo_id": 126248252, "repo_owner_id": 39150453, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "DARA-Project/GoDist"}, {"repo_id": 126248252, "repo_owner_id": 39150453, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "DARA-Project/GoDist"}, {"repo_id": 126248252, "repo_owner_id": 39150453, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "DARA-Project/GoDist"}, {"repo_id": 86672708, "repo_owner_id": 26781630, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Enable Go 1.6 on IBM zOS platform", "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "zos-go/release-branch.go1.6-zos"}, {"repo_id": 86672708, "repo_owner_id": 26781630, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Enable Go 1.6 on IBM zOS platform", "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "zos-go/release-branch.go1.6-zos"}, {"repo_id": 86672708, "repo_owner_id": 26781630, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Enable Go 1.6 on IBM zOS platform", "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "zos-go/release-branch.go1.6-zos"}, {"repo_id": 86672708, "repo_owner_id": 26781630, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "Enable Go 1.6 on IBM zOS platform", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "zos-go/release-branch.go1.6-zos"}, {"repo_id": 81880, "repo_owner_id": 1214129, "commit_at": "2013-06-08 15:19:22-07:00", "committer_id": 5578, "message": "Merge pull request #5 from T145/master\n\niSimplePull", "repo_description": "A simplistic date selection and time management library.", "generate_at": "2013-06-08 15:19:22-07:00", "author_id": 5578, "repo_name": "T145/calamazoo"}, {"repo_id": 81880, "repo_owner_id": 1214129, "commit_at": "2013-04-28 18:43:46-07:00", "committer_id": 5578, "message": "Merge pull request #4 from T145/master\n\nMy work here is done!", "repo_description": "A simplistic date selection and time management library.", "generate_at": "2013-04-28 18:43:46-07:00", "author_id": 5578, "repo_name": "T145/calamazoo"}, {"repo_id": 81880, "repo_owner_id": 1214129, "commit_at": "2013-04-16 02:36:23-07:00", "committer_id": 5578, "message": "Merge pull request #3 from T145/master\n\nRevised code to be as minimal as possible", "repo_description": "A simplistic date selection and time management library.", "generate_at": "2013-04-16 02:36:23-07:00", "author_id": 5578, "repo_name": "T145/calamazoo"}, {"repo_id": 81880, "repo_owner_id": 1214129, "commit_at": "2013-04-12 05:41:56-07:00", "committer_id": 5578, "message": "Merge pull request #2 from T145/master\n\nRenamed the initial file", "repo_description": "A simplistic date selection and time management library.", "generate_at": "2013-04-12 05:41:56-07:00", "author_id": 5578, "repo_name": "T145/calamazoo"}, {"repo_id": 81880, "repo_owner_id": 1214129, "commit_at": "2013-04-10 05:49:03-07:00", "committer_id": 5578, "message": "Merge pull request #1 from T145/master\n\nMajor update for calamazoo", "repo_description": "A simplistic date selection and time management library.", "generate_at": "2013-04-10 05:49:03-07:00", "author_id": 5578, "repo_name": "T145/calamazoo"}, {"repo_id": 11966887, "repo_owner_id": 6789, "commit_at": "2013-11-26 11:22:10-08:00", "committer_id": 5578, "message": "Merge pull request #1 from T145/patch-1\n\nUpdated README", "repo_description": "go-judy is a Go language wrapper of the Judy array implementation at http://judy.sourceforge.net.", "generate_at": "2013-11-26 11:22:10-08:00", "author_id": 5578, "repo_name": "gnoso/go-judy"}, {"repo_id": 11966887, "repo_owner_id": 6789, "commit_at": "2013-08-11 11:06:42-04:00", "committer_id": 5578, "message": "Add ByCount method to find the n-th index/value in each Judy1 or JudyL array.", "repo_description": "go-judy is a Go language wrapper of the Judy array implementation at http://judy.sourceforge.net.", "generate_at": "2013-08-11 11:06:42-04:00", "author_id": 5578, "repo_name": "gnoso/go-judy"}, {"repo_id": 11966887, "repo_owner_id": 6789, "commit_at": "2013-08-10 13:59:47-04:00", "committer_id": 5578, "message": "Update Readme to reflect addition of JudyL", "repo_description": "go-judy is a Go language wrapper of the Judy array implementation at http://judy.sourceforge.net.", "generate_at": "2013-08-10 13:59:47-04:00", "author_id": 5578, "repo_name": "gnoso/go-judy"}, {"repo_id": 11966887, "repo_owner_id": 6789, "commit_at": "2013-08-10 13:53:54-04:00", "committer_id": 5578, "message": "Add JudyL implementation.", "repo_description": "go-judy is a Go language wrapper of the Judy array implementation at http://judy.sourceforge.net.", "generate_at": "2013-08-10 13:53:54-04:00", "author_id": 5578, "repo_name": "gnoso/go-judy"}, {"repo_id": 11966887, "repo_owner_id": 6789, "commit_at": "2013-08-10 13:53:28-04:00", "committer_id": 5578, "message": "Tweak Judy1 docs and tests to go along with addition of JudyL.", "repo_description": "go-judy is a Go language wrapper of the Judy array implementation at http://judy.sourceforge.net.", "generate_at": "2013-08-10 13:53:28-04:00", "author_id": 5578, "repo_name": "gnoso/go-judy"}, {"repo_id": 11966887, "repo_owner_id": 6789, "commit_at": "2013-08-10 00:08:13-04:00", "committer_id": 5578, "message": "Rename judy code files.", "repo_description": "go-judy is a Go language wrapper of the Judy array implementation at http://judy.sourceforge.net.", "generate_at": "2013-08-10 00:08:13-04:00", "author_id": 5578, "repo_name": "gnoso/go-judy"}, {"repo_id": 11966887, "repo_owner_id": 6789, "commit_at": "2013-08-08 14:10:20-04:00", "committer_id": 5578, "message": "Add reverse order iteration functions", "repo_description": "go-judy is a Go language wrapper of the Judy array implementation at http://judy.sourceforge.net.", "generate_at": "2013-08-08 14:10:20-04:00", "author_id": 5578, "repo_name": "gnoso/go-judy"}, {"repo_id": 11966887, "repo_owner_id": 6789, "commit_at": "2013-08-08 11:56:27-04:00", "committer_id": 5578, "message": "Add First and Next search functions", "repo_description": "go-judy is a Go language wrapper of the Judy array implementation at http://judy.sourceforge.net.", "generate_at": "2013-08-08 11:56:27-04:00", "author_id": 5578, "repo_name": "gnoso/go-judy"}, {"repo_id": 11966887, "repo_owner_id": 6789, "commit_at": "2013-08-08 09:48:56-04:00", "committer_id": 5578, "message": "Add tests for Set/Unset return values.", "repo_description": "go-judy is a Go language wrapper of the Judy array implementation at http://judy.sourceforge.net.", "generate_at": "2013-08-08 09:48:56-04:00", "author_id": 5578, "repo_name": "gnoso/go-judy"}, {"repo_id": 11966887, "repo_owner_id": 6789, "commit_at": "2013-08-08 09:40:29-04:00", "committer_id": 5578, "message": "Add README", "repo_description": "go-judy is a Go language wrapper of the Judy array implementation at http://judy.sourceforge.net.", "generate_at": "2013-08-08 09:40:29-04:00", "author_id": 5578, "repo_name": "gnoso/go-judy"}, {"repo_id": 11966887, "repo_owner_id": 6789, "commit_at": "2013-08-08 09:08:37-04:00", "committer_id": 5578, "message": "Add basic godocs", "repo_description": "go-judy is a Go language wrapper of the Judy array implementation at http://judy.sourceforge.net.", "generate_at": "2013-08-08 09:08:37-04:00", "author_id": 5578, "repo_name": "gnoso/go-judy"}, {"repo_id": 11966887, "repo_owner_id": 6789, "commit_at": "2013-08-08 08:53:03-04:00", "committer_id": 5578, "message": "Switch to Judy1 structure from JudyL. Add memory and cpu benchmarking.", "repo_description": "go-judy is a Go language wrapper of the Judy array implementation at http://judy.sourceforge.net.", "generate_at": "2013-08-08 08:53:03-04:00", "author_id": 5578, "repo_name": "gnoso/go-judy"}, {"repo_id": 11966887, "repo_owner_id": 6789, "commit_at": "2013-08-07 23:39:52-04:00", "committer_id": 5578, "message": "Initial checkin.", "repo_description": "go-judy is a Go language wrapper of the Judy array implementation at http://judy.sourceforge.net.", "generate_at": "2013-08-07 23:39:52-04:00", "author_id": 5578, "repo_name": "gnoso/go-judy"}, {"repo_id": 42817250, "repo_owner_id": 29186932, "commit_at": "2013-11-23 14:50:00-05:00", "committer_id": 5578, "message": "Use idiomatic String() method to return the tag name.\n\nWorks with %v string formatting.", "repo_description": "Cap'n Proto library and code generator for Go", "generate_at": "2013-11-23 14:50:00-05:00", "author_id": 5578, "repo_name": "capnproto/go-capnproto2"}, {"repo_id": 42817250, "repo_owner_id": 29186932, "commit_at": "2013-11-23 01:00:06-05:00", "committer_id": 5578, "message": "Convert enum tag lookup from a map to a generated switch statement.\n\nAlso, generate tags for each enumerant by default, and add a notag annotation for disabling the default behavior.", "repo_description": "Cap'n Proto library and code generator for Go", "generate_at": "2013-11-23 01:00:06-05:00", "author_id": 5578, "repo_name": "capnproto/go-capnproto2"}, {"repo_id": 42817250, "repo_owner_id": 29186932, "commit_at": "2013-11-22 18:01:44-05:00", "committer_id": 5578, "message": "Add support for enumeration tagging in the schema file.\n\nGenerate a map[EnumType]string that maps the enumeration codes to a friendly string. The string is taken from a $tag annotation added to each declaration in the schema file.", "repo_description": "Cap'n Proto library and code generator for Go", "generate_at": "2013-11-22 18:01:44-05:00", "author_id": 5578, "repo_name": "capnproto/go-capnproto2"}, {"repo_id": 42817250, "repo_owner_id": 29186932, "commit_at": "2013-11-17 12:03:39-05:00", "committer_id": 5578, "message": "Make the generated “which” method publicly accessible.", "repo_description": "Cap'n Proto library and code generator for Go", "generate_at": "2013-11-17 12:03:39-05:00", "author_id": 5578, "repo_name": "capnproto/go-capnproto2"}, {"repo_id": 59701527, "repo_owner_id": 3746900, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "ganboing/go-esx"}, {"repo_id": 59701527, "repo_owner_id": 3746900, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "ganboing/go-esx"}, {"repo_id": 59701527, "repo_owner_id": 3746900, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "ganboing/go-esx"}, {"repo_id": 59701527, "repo_owner_id": 3746900, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "ganboing/go-esx"}, {"repo_id": 81815, "repo_owner_id": 6789, "commit_at": "2013-04-16 02:37:03-07:00", "committer_id": 5578, "message": "Merge pull request #3 from T145/master\n\nCode refinement", "repo_description": "Our homegrown javascript graphing library.", "generate_at": "2013-04-16 02:37:03-07:00", "author_id": 5578, "repo_name": "gnoso/chartsy"}, {"repo_id": 81815, "repo_owner_id": 6789, "commit_at": "2013-04-12 05:44:16-07:00", "committer_id": 5578, "message": "Merge pull request #2 from T145/master\n\nReorginazation and cleanup of files", "repo_description": "Our homegrown javascript graphing library.", "generate_at": "2013-04-12 05:44:16-07:00", "author_id": 5578, "repo_name": "gnoso/chartsy"}, {"repo_id": 81815, "repo_owner_id": 6789, "commit_at": "2013-04-10 05:54:36-07:00", "committer_id": 5578, "message": "Merge pull request #1 from T145/master\n\nVery simplistic refinement", "repo_description": "Our homegrown javascript graphing library.", "generate_at": "2013-04-10 05:54:36-07:00", "author_id": 5578, "repo_name": "gnoso/chartsy"}, {"repo_id": 58554039, "repo_owner_id": 3977232, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "vvlevchenko/go"}, {"repo_id": 58554039, "repo_owner_id": 3977232, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "vvlevchenko/go"}, {"repo_id": 58554039, "repo_owner_id": 3977232, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "vvlevchenko/go"}, {"repo_id": 58554039, "repo_owner_id": 3977232, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "vvlevchenko/go"}, {"repo_id": 9573200, "repo_owner_id": 32387, "commit_at": "2013-11-23 14:50:00-05:00", "committer_id": 5578, "message": "Use idiomatic String() method to return the tag name.\n\nWorks with %v string formatting.", "repo_description": "Cap'n Proto library and parser for go", "generate_at": "2013-11-23 14:50:00-05:00", "author_id": 5578, "repo_name": "jmckaskill/go-capnproto"}, {"repo_id": 9573200, "repo_owner_id": 32387, "commit_at": "2013-11-23 01:00:06-05:00", "committer_id": 5578, "message": "Convert enum tag lookup from a map to a generated switch statement.\n\nAlso, generate tags for each enumerant by default, and add a notag annotation for disabling the default behavior.", "repo_description": "Cap'n Proto library and parser for go", "generate_at": "2013-11-23 01:00:06-05:00", "author_id": 5578, "repo_name": "jmckaskill/go-capnproto"}, {"repo_id": 9573200, "repo_owner_id": 32387, "commit_at": "2013-11-22 18:01:44-05:00", "committer_id": 5578, "message": "Add support for enumeration tagging in the schema file.\n\nGenerate a map[EnumType]string that maps the enumeration codes to a friendly string. The string is taken from a $tag annotation added to each declaration in the schema file.", "repo_description": "Cap'n Proto library and parser for go", "generate_at": "2013-11-22 18:01:44-05:00", "author_id": 5578, "repo_name": "jmckaskill/go-capnproto"}, {"repo_id": 9573200, "repo_owner_id": 32387, "commit_at": "2013-11-17 12:03:39-05:00", "committer_id": 5578, "message": "Make the generated “which” method publicly accessible.", "repo_description": "Cap'n Proto library and parser for go", "generate_at": "2013-11-17 12:03:39-05:00", "author_id": 5578, "repo_name": "jmckaskill/go-capnproto"}, {"repo_id": 38691228, "repo_owner_id": 13220780, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "This is the modified Go compiler used at Lsub for Clive", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "fjballest/golang"}, {"repo_id": 38691228, "repo_owner_id": 13220780, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "This is the modified Go compiler used at Lsub for Clive", "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "fjballest/golang"}, {"repo_id": 38691228, "repo_owner_id": 13220780, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "This is the modified Go compiler used at Lsub for Clive", "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "fjballest/golang"}, {"repo_id": 38691228, "repo_owner_id": 13220780, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "This is the modified Go compiler used at Lsub for Clive", "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "fjballest/golang"}, {"repo_id": 41589295, "repo_owner_id": 1331747, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "Go development tree for the sparc64 port", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "4ad/go"}, {"repo_id": 41589295, "repo_owner_id": 1331747, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Go development tree for the sparc64 port", "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "4ad/go"}, {"repo_id": 41589295, "repo_owner_id": 1331747, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Go development tree for the sparc64 port", "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "4ad/go"}, {"repo_id": 41589295, "repo_owner_id": 1331747, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Go development tree for the sparc64 port", "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "4ad/go"}, {"repo_id": 54698368, "repo_owner_id": 6293917, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "tlimoncelli/go"}, {"repo_id": 54698368, "repo_owner_id": 6293917, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "tlimoncelli/go"}, {"repo_id": 54698368, "repo_owner_id": 6293917, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "tlimoncelli/go"}, {"repo_id": 54698368, "repo_owner_id": 6293917, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "tlimoncelli/go"}, {"repo_id": 67647661, "repo_owner_id": 12826430, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "fuchsia-mirror/third_party-go"}, {"repo_id": 67647661, "repo_owner_id": 12826430, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "fuchsia-mirror/third_party-go"}, {"repo_id": 67647661, "repo_owner_id": 12826430, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "fuchsia-mirror/third_party-go"}, {"repo_id": 67647661, "repo_owner_id": 12826430, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "fuchsia-mirror/third_party-go"}, {"repo_id": 87498233, "repo_owner_id": 26781630, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "A port of the Go programming language to the IBM z/OS. Issues are monitored, and comments/questions are welcome. ", "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "zos-go/go"}, {"repo_id": 87498233, "repo_owner_id": 26781630, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "A port of the Go programming language to the IBM z/OS. Issues are monitored, and comments/questions are welcome. ", "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "zos-go/go"}, {"repo_id": 87498233, "repo_owner_id": 26781630, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "A port of the Go programming language to the IBM z/OS. Issues are monitored, and comments/questions are welcome. ", "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "zos-go/go"}, {"repo_id": 87498233, "repo_owner_id": 26781630, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "A port of the Go programming language to the IBM z/OS. Issues are monitored, and comments/questions are welcome. ", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "zos-go/go"}, {"repo_id": 93704261, "repo_owner_id": 67496, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "another go mirror", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "josharian/goo"}, {"repo_id": 93704261, "repo_owner_id": 67496, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "another go mirror", "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "josharian/goo"}, {"repo_id": 93704261, "repo_owner_id": 67496, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "another go mirror", "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "josharian/goo"}, {"repo_id": 93704261, "repo_owner_id": 67496, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "another go mirror", "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "josharian/goo"}, {"repo_id": 132043144, "repo_owner_id": 4944410, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "nsajko/go"}, {"repo_id": 132043144, "repo_owner_id": 4944410, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "nsajko/go"}, {"repo_id": 132043144, "repo_owner_id": 4944410, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "nsajko/go"}, {"repo_id": 132043144, "repo_owner_id": 4944410, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "nsajko/go"}, {"repo_id": 39103031, "repo_owner_id": 13330702, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "fork of golang/go", "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "Harvey-OS/go"}, {"repo_id": 39103031, "repo_owner_id": 13330702, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "fork of golang/go", "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "Harvey-OS/go"}, {"repo_id": 39103031, "repo_owner_id": 13330702, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "fork of golang/go", "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "Harvey-OS/go"}, {"repo_id": 39103031, "repo_owner_id": 13330702, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "fork of golang/go", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "Harvey-OS/go"}, {"repo_id": 93986397, "repo_owner_id": 1106207, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Fork of official Go language repository for experimentation", "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "bford/go"}, {"repo_id": 93986397, "repo_owner_id": 1106207, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Fork of official Go language repository for experimentation", "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "bford/go"}, {"repo_id": 93986397, "repo_owner_id": 1106207, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Fork of official Go language repository for experimentation", "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "bford/go"}, {"repo_id": 93986397, "repo_owner_id": 1106207, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "Fork of official Go language repository for experimentation", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "bford/go"}, {"repo_id": 128635274, "repo_owner_id": 17806342, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "[DEVELOPMENT] The customizable encoding/json package based on [zhanbei/golang-encoding-json](https://github.com/zhanbei/golang-encoding-json).", "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "zhanbei/go-json"}, {"repo_id": 128635274, "repo_owner_id": 17806342, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "[DEVELOPMENT] The customizable encoding/json package based on [zhanbei/golang-encoding-json](https://github.com/zhanbei/golang-encoding-json).", "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "zhanbei/go-json"}, {"repo_id": 128635274, "repo_owner_id": 17806342, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "[DEVELOPMENT] The customizable encoding/json package based on [zhanbei/golang-encoding-json](https://github.com/zhanbei/golang-encoding-json).", "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "zhanbei/go-json"}, {"repo_id": 40541596, "repo_owner_id": 5578, "commit_at": "2015-08-11 09:11:29-04:00", "committer_id": 5578, "message": "Prepare 0.2.0 release", "repo_description": null, "generate_at": "2015-08-11 09:11:29-04:00", "author_id": 5578, "repo_name": "peterwald/buffer-pos"}, {"repo_id": 40541596, "repo_owner_id": 5578, "commit_at": "2015-08-11 08:55:22-04:00", "committer_id": 5578, "message": "Initial commit.", "repo_description": null, "generate_at": "2015-08-11 08:55:22-04:00", "author_id": 5578, "repo_name": "peterwald/buffer-pos"}, {"repo_id": 40541596, "repo_owner_id": 5578, "commit_at": "2015-08-12 09:20:45-04:00", "committer_id": 5578, "message": "Prepare 0.3.0 release", "repo_description": null, "generate_at": "2015-08-12 09:20:45-04:00", "author_id": 5578, "repo_name": "peterwald/buffer-pos"}, {"repo_id": 40541596, "repo_owner_id": 5578, "commit_at": "2015-08-12 09:20:21-04:00", "committer_id": 5578, "message": "Tweak the language and add # to the output.", "repo_description": null, "generate_at": "2015-08-12 09:20:21-04:00", "author_id": 5578, "repo_name": "peterwald/buffer-pos"}, {"repo_id": 40541596, "repo_owner_id": 5578, "commit_at": "2015-08-11 09:11:20-04:00", "committer_id": 5578, "message": "Update key binding.", "repo_description": null, "generate_at": "2015-08-11 09:11:20-04:00", "author_id": 5578, "repo_name": "peterwald/buffer-pos"}, {"repo_id": 40541596, "repo_owner_id": 5578, "commit_at": "2015-08-11 09:05:35-04:00", "committer_id": 5578, "message": "Prepare 0.1.0 release", "repo_description": null, "generate_at": "2015-08-11 09:05:35-04:00", "author_id": 5578, "repo_name": "peterwald/buffer-pos"}, {"repo_id": 40541596, "repo_owner_id": 5578, "commit_at": "2015-08-11 09:04:54-04:00", "committer_id": 5578, "message": "Tweak docs.", "repo_description": null, "generate_at": "2015-08-11 09:04:54-04:00", "author_id": 5578, "repo_name": "peterwald/buffer-pos"}, {"repo_id": 44394636, "repo_owner_id": 14945810, "commit_at": "2015-10-16 18:06:03-04:00", "committer_id": 5578, "message": "Initial checkin.", "repo_description": null, "generate_at": "2015-10-16 18:06:03-04:00", "author_id": 5578, "repo_name": "exponent-io/tmplgen"}, {"repo_id": 44394636, "repo_owner_id": 14945810, "commit_at": "2015-10-16 11:39:37-04:00", "committer_id": 5578, "message": "Create README", "repo_description": null, "generate_at": "2015-10-16 11:39:37-04:00", "author_id": 5578, "repo_name": "exponent-io/tmplgen"}, {"repo_id": 44394636, "repo_owner_id": 14945810, "commit_at": "2015-10-16 11:39:13-04:00", "committer_id": 5578, "message": "Initial commit", "repo_description": null, "generate_at": "2015-10-16 11:39:13-04:00", "author_id": 5578, "repo_name": "exponent-io/tmplgen"}, {"repo_id": 24914297, "repo_owner_id": 13982985, "commit_at": "2017-02-22 11:44:39-06:00", "committer_id": 206371, "message": "Allow generation of numbers with fractional part. (#249)\n\n* Allow generation of numbers with fractional part.\r\n\r\n* Fix test errors, after changing to develop branch", "repo_description": "JSON-Schema + fake data generators", "generate_at": "2017-02-22 12:44:39-05:00", "author_id": 5578, "repo_name": "json-schema-faker/json-schema-faker"}, {"repo_id": 24914297, "repo_owner_id": 13982985, "commit_at": "2017-02-22 11:43:49-06:00", "committer_id": 206371, "message": "Allow for a fallback if format is not recognized. (#250)", "repo_description": "JSON-Schema + fake data generators", "generate_at": "2017-02-22 12:43:49-05:00", "author_id": 5578, "repo_name": "json-schema-faker/json-schema-faker"}, {"repo_id": 118211980, "repo_owner_id": 28052237, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "StingNevermore/go"}, {"repo_id": 118211980, "repo_owner_id": 28052237, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "StingNevermore/go"}, {"repo_id": 118211980, "repo_owner_id": 28052237, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "StingNevermore/go"}, {"repo_id": 118211980, "repo_owner_id": 28052237, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "StingNevermore/go"}, {"repo_id": 96324974, "repo_owner_id": 29797851, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "Sharu2806/Navigation"}, {"repo_id": 96324974, "repo_owner_id": 29797851, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "Sharu2806/Navigation"}, {"repo_id": 96324974, "repo_owner_id": 29797851, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "Sharu2806/Navigation"}, {"repo_id": 96324974, "repo_owner_id": 29797851, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "Sharu2806/Navigation"}, {"repo_id": 141100894, "repo_owner_id": 39017688, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "yuanlairucisky/go-program-language"}, {"repo_id": 141100894, "repo_owner_id": 39017688, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "yuanlairucisky/go-program-language"}, {"repo_id": 141100894, "repo_owner_id": 39017688, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "yuanlairucisky/go-program-language"}, {"repo_id": 141100894, "repo_owner_id": 39017688, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "yuanlairucisky/go-program-language"}, {"repo_id": 39735, "repo_owner_id": 6789, "commit_at": "2013-05-28 13:47:53-07:00", "committer_id": 5578, "message": "Merge pull request #3 from T145/master\n\nUpdated license statement", "repo_description": "Rails Plugin that enables RESTful Resources to be routed by a field other than the record id.", "generate_at": "2013-05-28 13:47:53-07:00", "author_id": 5578, "repo_name": "gnoso/route_by"}, {"repo_id": 39735, "repo_owner_id": 6789, "commit_at": "2013-05-16 15:12:43-07:00", "committer_id": 5578, "message": "Merge pull request #2 from T145/master\n\nHousekeep", "repo_description": "Rails Plugin that enables RESTful Resources to be routed by a field other than the record id.", "generate_at": "2013-05-16 15:12:43-07:00", "author_id": 5578, "repo_name": "gnoso/route_by"}, {"repo_id": 39735, "repo_owner_id": 6789, "commit_at": "2013-04-15 05:18:23-07:00", "committer_id": 5578, "message": "Merge pull request #1 from T145/master\n\nRevival!", "repo_description": "Rails Plugin that enables RESTful Resources to be routed by a field other than the record id.", "generate_at": "2013-04-15 05:18:23-07:00", "author_id": 5578, "repo_name": "gnoso/route_by"}, {"repo_id": 39735, "repo_owner_id": 6789, "commit_at": "2008-08-16 00:41:16-04:00", "committer_id": 5578, "message": "Adding scoping for route_by", "repo_description": "Rails Plugin that enables RESTful Resources to be routed by a field other than the record id.", "generate_at": "2008-08-16 00:41:16-04:00", "author_id": 5578, "repo_name": "gnoso/route_by"}, {"repo_id": 39735, "repo_owner_id": 6789, "commit_at": "2008-08-10 01:37:01-04:00", "committer_id": 5578, "message": "Added method to reset a parameter value", "repo_description": "Rails Plugin that enables RESTful Resources to be routed by a field other than the record id.", "generate_at": "2008-08-10 01:37:01-04:00", "author_id": 5578, "repo_name": "gnoso/route_by"}, {"repo_id": 39735, "repo_owner_id": 6789, "commit_at": "2008-08-04 11:40:16-04:00", "committer_id": 5578, "message": "fix for some leftover hard-coded names", "repo_description": "Rails Plugin that enables RESTful Resources to be routed by a field other than the record id.", "generate_at": "2008-08-04 11:40:16-04:00", "author_id": 5578, "repo_name": "gnoso/route_by"}, {"repo_id": 39735, "repo_owner_id": 6789, "commit_at": "2008-08-04 00:08:15-04:00", "committer_id": 5578, "message": "One more fix", "repo_description": "Rails Plugin that enables RESTful Resources to be routed by a field other than the record id.", "generate_at": "2008-08-04 00:08:15-04:00", "author_id": 5578, "repo_name": "gnoso/route_by"}, {"repo_id": 39735, "repo_owner_id": 6789, "commit_at": "2008-08-04 00:04:37-04:00", "committer_id": 5578, "message": "Wrote a quick README for the project", "repo_description": "Rails Plugin that enables RESTful Resources to be routed by a field other than the record id.", "generate_at": "2008-08-04 00:04:37-04:00", "author_id": 5578, "repo_name": "gnoso/route_by"}, {"repo_id": 39735, "repo_owner_id": 6789, "commit_at": "2008-08-03 23:38:02-04:00", "committer_id": 5578, "message": "Initial Commit", "repo_description": "Rails Plugin that enables RESTful Resources to be routed by a field other than the record id.", "generate_at": "2008-08-03 23:38:02-04:00", "author_id": 5578, "repo_name": "gnoso/route_by"}, {"repo_id": 288812, "repo_owner_id": 6789, "commit_at": "2013-05-28 13:47:36-07:00", "committer_id": 5578, "message": "Merge pull request #2 from T145/master\n\nUpdated license statement", "repo_description": "Simple tool for running queries against ActiveRecord and putting them into a Google Spreadsheet.", "generate_at": "2013-05-28 13:47:36-07:00", "author_id": 5578, "repo_name": "gnoso/spreadsheet_report"}, {"repo_id": 288812, "repo_owner_id": 6789, "commit_at": "2013-05-16 15:13:18-07:00", "committer_id": 5578, "message": "Merge pull request #1 from T145/master\n\nHousekeep", "repo_description": "Simple tool for running queries against ActiveRecord and putting them into a Google Spreadsheet.", "generate_at": "2013-05-16 15:13:18-07:00", "author_id": 5578, "repo_name": "gnoso/spreadsheet_report"}, {"repo_id": 23096959, "repo_owner_id": 4314092, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "The Go programming language", "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "golang/go"}, {"repo_id": 23096959, "repo_owner_id": 4314092, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "The Go programming language", "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "golang/go"}, {"repo_id": 23096959, "repo_owner_id": 4314092, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "The Go programming language", "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "golang/go"}, {"repo_id": 23096959, "repo_owner_id": 4314092, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "The Go programming language", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "golang/go"}, {"repo_id": 15983484, "repo_owner_id": 314135, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Stable Go with Cloudflare (experimental) patches and backports from tip", "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "cloudflare/go"}, {"repo_id": 15983484, "repo_owner_id": 314135, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Stable Go with Cloudflare (experimental) patches and backports from tip", "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "cloudflare/go"}, {"repo_id": 15983484, "repo_owner_id": 314135, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Stable Go with Cloudflare (experimental) patches and backports from tip", "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "cloudflare/go"}, {"repo_id": 15983484, "repo_owner_id": 314135, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "Stable Go with Cloudflare (experimental) patches and backports from tip", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "cloudflare/go"}, {"repo_id": 55541121, "repo_owner_id": 18294211, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "golang2/go2"}, {"repo_id": 55541121, "repo_owner_id": 18294211, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "golang2/go2"}, {"repo_id": 55541121, "repo_owner_id": 18294211, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "golang2/go2"}, {"repo_id": 55541121, "repo_owner_id": 18294211, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "golang2/go2"}, {"repo_id": 61455011, "repo_owner_id": 18660902, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "Go fork for the unigornel project", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "unigornel/go"}, {"repo_id": 61455011, "repo_owner_id": 18660902, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Go fork for the unigornel project", "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "unigornel/go"}, {"repo_id": 61455011, "repo_owner_id": 18660902, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Go fork for the unigornel project", "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "unigornel/go"}, {"repo_id": 61455011, "repo_owner_id": 18660902, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Go fork for the unigornel project", "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "unigornel/go"}, {"repo_id": 70146979, "repo_owner_id": 84580, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "bendikro/golang-fixed"}, {"repo_id": 70146979, "repo_owner_id": 84580, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "bendikro/golang-fixed"}, {"repo_id": 70146979, "repo_owner_id": 84580, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "bendikro/golang-fixed"}, {"repo_id": 70146979, "repo_owner_id": 84580, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "bendikro/golang-fixed"}, {"repo_id": 124338634, "repo_owner_id": 37095798, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "xerrie1997/hello2"}, {"repo_id": 124338634, "repo_owner_id": 37095798, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "xerrie1997/hello2"}, {"repo_id": 124338634, "repo_owner_id": 37095798, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "xerrie1997/hello2"}, {"repo_id": 124338634, "repo_owner_id": 37095798, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "xerrie1997/hello2"}, {"repo_id": 113391362, "repo_owner_id": 15966726, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "flyinox/gosm"}, {"repo_id": 113391362, "repo_owner_id": 15966726, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "flyinox/gosm"}, {"repo_id": 113391362, "repo_owner_id": 15966726, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "flyinox/gosm"}, {"repo_id": 113391362, "repo_owner_id": 15966726, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "flyinox/gosm"}, {"repo_id": 48663066, "repo_owner_id": 593333, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "my changes to golang", "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "malvira/go"}, {"repo_id": 48663066, "repo_owner_id": 593333, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "my changes to golang", "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "malvira/go"}, {"repo_id": 48663066, "repo_owner_id": 593333, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "my changes to golang", "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "malvira/go"}, {"repo_id": 48663066, "repo_owner_id": 593333, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "my changes to golang", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "malvira/go"}, {"repo_id": 77427400, "repo_owner_id": 2025128, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "ejson is a Go package for encoding and decoding Meteor's EJSON (Extended JSON).", "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "jimsmart/ejson"}, {"repo_id": 77427400, "repo_owner_id": 2025128, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "ejson is a Go package for encoding and decoding Meteor's EJSON (Extended JSON).", "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "jimsmart/ejson"}, {"repo_id": 77427400, "repo_owner_id": 2025128, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "ejson is a Go package for encoding and decoding Meteor's EJSON (Extended JSON).", "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "jimsmart/ejson"}, {"repo_id": 80787168, "repo_owner_id": 3170931, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "ycoroneos/golang_embedded"}, {"repo_id": 80787168, "repo_owner_id": 3170931, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "ycoroneos/golang_embedded"}, {"repo_id": 80787168, "repo_owner_id": 3170931, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "ycoroneos/golang_embedded"}, {"repo_id": 80787168, "repo_owner_id": 3170931, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "ycoroneos/golang_embedded"}, {"repo_id": 130247771, "repo_owner_id": 777456, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Using Reference Counting GC with Cyclic Detection ", "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "filipevarjao/go"}, {"repo_id": 130247771, "repo_owner_id": 777456, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Using Reference Counting GC with Cyclic Detection ", "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "filipevarjao/go"}, {"repo_id": 130247771, "repo_owner_id": 777456, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Using Reference Counting GC with Cyclic Detection ", "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "filipevarjao/go"}, {"repo_id": 130247771, "repo_owner_id": 777456, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "Using Reference Counting GC with Cyclic Detection ", "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "filipevarjao/go"}, {"repo_id": 104005058, "repo_owner_id": 1923644, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "ljfranklin/go"}, {"repo_id": 104005058, "repo_owner_id": 1923644, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "ljfranklin/go"}, {"repo_id": 104005058, "repo_owner_id": 1923644, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "ljfranklin/go"}, {"repo_id": 104005058, "repo_owner_id": 1923644, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "ljfranklin/go"}, {"repo_id": 280982, "repo_owner_id": 6789, "commit_at": "2013-05-20 04:54:43-07:00", "committer_id": 5578, "message": "Merge pull request #1 from T145/master\n\nFixed up the project", "repo_description": "Helpful framework for working with services with ActiveRecord and ActiveResource.", "generate_at": "2013-05-20 04:54:43-07:00", "author_id": 5578, "repo_name": "gnoso/remote_entity"}, {"repo_id": 14214963, "repo_owner_id": 445247, "commit_at": "2013-11-23 14:50:00-05:00", "committer_id": 5578, "message": "Use idiomatic String() method to return the tag name.\n\nWorks with %v string formatting.", "repo_description": "Cap'n Proto library and parser for go. This is go-capnproto-1.0, and does not have rpc. See https://github.com/zombiezen/go-capnproto2 for 2.0 which has rpc and capabilities.", "generate_at": "2013-11-23 14:50:00-05:00", "author_id": 5578, "repo_name": "glycerine/go-capnproto"}, {"repo_id": 14214963, "repo_owner_id": 445247, "commit_at": "2013-11-23 01:00:06-05:00", "committer_id": 5578, "message": "Convert enum tag lookup from a map to a generated switch statement.\n\nAlso, generate tags for each enumerant by default, and add a notag annotation for disabling the default behavior.", "repo_description": "Cap'n Proto library and parser for go. This is go-capnproto-1.0, and does not have rpc. See https://github.com/zombiezen/go-capnproto2 for 2.0 which has rpc and capabilities.", "generate_at": "2013-11-23 01:00:06-05:00", "author_id": 5578, "repo_name": "glycerine/go-capnproto"}, {"repo_id": 14214963, "repo_owner_id": 445247, "commit_at": "2013-11-22 18:01:44-05:00", "committer_id": 5578, "message": "Add support for enumeration tagging in the schema file.\n\nGenerate a map[EnumType]string that maps the enumeration codes to a friendly string. The string is taken from a $tag annotation added to each declaration in the schema file.", "repo_description": "Cap'n Proto library and parser for go. This is go-capnproto-1.0, and does not have rpc. See https://github.com/zombiezen/go-capnproto2 for 2.0 which has rpc and capabilities.", "generate_at": "2013-11-22 18:01:44-05:00", "author_id": 5578, "repo_name": "glycerine/go-capnproto"}, {"repo_id": 14214963, "repo_owner_id": 445247, "commit_at": "2013-11-17 12:03:39-05:00", "committer_id": 5578, "message": "Make the generated “which” method publicly accessible.", "repo_description": "Cap'n Proto library and parser for go. This is go-capnproto-1.0, and does not have rpc. See https://github.com/zombiezen/go-capnproto2 for 2.0 which has rpc and capabilities.", "generate_at": "2013-11-17 12:03:39-05:00", "author_id": 5578, "repo_name": "glycerine/go-capnproto"}, {"repo_id": 27763329, "repo_owner_id": 9815987, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "[已过期]Go 编程语言中文翻译", "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "Go-zh/go.old"}, {"repo_id": 27763329, "repo_owner_id": 9815987, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "[已过期]Go 编程语言中文翻译", "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "Go-zh/go.old"}, {"repo_id": 27763329, "repo_owner_id": 9815987, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "[已过期]Go 编程语言中文翻译", "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "Go-zh/go.old"}, {"repo_id": 27763329, "repo_owner_id": 9815987, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "[已过期]Go 编程语言中文翻译", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "Go-zh/go.old"}, {"repo_id": 50060394, "repo_owner_id": 14945810, "commit_at": "2016-01-20 16:13:01-05:00", "committer_id": 5578, "message": "update README", "repo_description": null, "generate_at": "2016-01-20 16:13:01-05:00", "author_id": 5578, "repo_name": "exponent-io/resolve"}, {"repo_id": 50060394, "repo_owner_id": 14945810, "commit_at": "2016-01-20 16:11:44-05:00", "committer_id": 5578, "message": "README", "repo_description": null, "generate_at": "2016-01-20 16:11:44-05:00", "author_id": 5578, "repo_name": "exponent-io/resolve"}, {"repo_id": 50060394, "repo_owner_id": 14945810, "commit_at": "2016-01-20 16:11:09-05:00", "committer_id": 5578, "message": "resolve a single hostname", "repo_description": null, "generate_at": "2016-01-20 16:11:09-05:00", "author_id": 5578, "repo_name": "exponent-io/resolve"}, {"repo_id": 50060394, "repo_owner_id": 14945810, "commit_at": "2016-01-20 16:09:15-05:00", "committer_id": 5578, "message": "Initial commit", "repo_description": null, "generate_at": "2016-01-20 16:09:15-05:00", "author_id": 5578, "repo_name": "exponent-io/resolve"}, {"repo_id": 67298271, "repo_owner_id": 376414, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "A Bengali (বাংলা) version of the Go compiler and toolchain", "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "ChimeraCoder/koro"}, {"repo_id": 67298271, "repo_owner_id": 376414, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "A Bengali (বাংলা) version of the Go compiler and toolchain", "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "ChimeraCoder/koro"}, {"repo_id": 67298271, "repo_owner_id": 376414, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "A Bengali (বাংলা) version of the Go compiler and toolchain", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "ChimeraCoder/koro"}, {"repo_id": 67298271, "repo_owner_id": 376414, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "A Bengali (বাংলা) version of the Go compiler and toolchain", "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "ChimeraCoder/koro"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2016-10-13 15:31:15-04:00", "committer_id": 5578, "message": "Make the Journal more robust to corrupted data.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2016-10-13 15:31:15-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-05-23 09:35:10-04:00", "committer_id": 5578, "message": "Remove extra parameters from the KeyValueStore constructor.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-05-23 09:35:10-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-05-16 18:27:38-04:00", "committer_id": 5578, "message": "Merge Razor Updates.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-05-16 18:27:38-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-05-16 17:34:34-04:00", "committer_id": 5578, "message": "Merge branch 'NCover'", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-05-16 17:34:34-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-05-08 16:06:41-04:00", "committer_id": 5578, "message": "Add utility function to remove a page from the RazorDB manifest.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-05-08 16:04:20-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-04-29 08:26:31-04:00", "committer_id": 5578, "message": "Merge remote-tracking branch 'origin/NCover' into NCover", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-04-29 08:26:31-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-04-29 08:19:34-04:00", "committer_id": 5578, "message": "Force git clients to not reformat the file on checkin/checkout.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-04-29 08:19:34-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-04-28 15:23:48-04:00", "committer_id": 5578, "message": "Remove .nuget reference from project.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-04-28 13:05:04-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-04-23 16:50:21-04:00", "committer_id": 5578, "message": "Cleanup .gitignore file.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-04-23 16:50:21-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-04-16 16:20:17-04:00", "committer_id": 5578, "message": "Merge branch 'NCover' of github.com:gnoso/razordb into NCover", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-04-16 16:20:17-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-04-16 16:19:00-04:00", "committer_id": 5578, "message": "Implement a more resilient scheme for rotating the manifest.\n\nPreviously, when rolling over a manifest, we would write it to a temp file,\ndelete the current manifest and then rename the temp file over to the\nmanifest file name.\n\nThe new scheme is to keep two copies of the manifest at all times. We offset\nthe rotation counter so they don't rotate at the same time. Then instead\nof deleting the file and renaming, we simply truncate the existing manifest file\nand write the new manifest over it. If anything fails, we can get the manifest\nfrom the other copy.\n\nAnother change is to open the file in WriteThrough mode, so no caching occurs.\nThis should be the same as a Write followed by a Flush, but it may be more reliable.\n\nWe pre-contruct the entire manifest contents and write in a single block to prevent\ncacheless write from dragging down performance. After changing the writes to async\nwrites, this complete change appears to be both more resilient to failures as well as\nquite a bit faster.\n\n[#48200043]", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-04-16 16:19:00-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-04-10 17:03:59-04:00", "committer_id": 5578, "message": "Remove hot lock in the KeyValueStore.Set path.  Use a lighter weight counter to gate the TableManager.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-04-10 17:03:59-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-04-05 16:30:04-04:00", "committer_id": 5578, "message": "Fix for possibly removing pages that aren't really orphaned. Especially if they are in a current page rotation and are not on the top level.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-04-05 16:30:04-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-04-05 15:54:58-04:00", "committer_id": 5578, "message": "Add RazorUtil function to split a manifest file into individual manifests for repair purposes.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-04-05 15:54:58-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-03-22 09:44:42-04:00", "committer_id": 5578, "message": "Convert page merge operation to cache records in memory per page before merging rather after merging, so the read I/O is as sequential as the write I/O.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-03-22 09:44:42-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-03-21 19:50:22-04:00", "committer_id": 5578, "message": "During merge, read at once and write at once, now that the size is bounded.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-03-21 19:50:22-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-03-21 19:49:39-04:00", "committer_id": 5578, "message": "Take twice as many level-0 pages under high write pressure.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-03-21 19:49:39-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-03-21 19:48:30-04:00", "committer_id": 5578, "message": "Add test for timing of heavy write loads.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-03-21 19:48:30-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-03-21 15:32:55-04:00", "committer_id": 5578, "message": "Merge branch 'NCover'", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-03-21 15:32:55-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-03-21 15:32:12-04:00", "committer_id": 5578, "message": "Merge remote-tracking branch 'origin/NCover' into NCover", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-03-21 15:32:12-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-03-21 15:31:14-04:00", "committer_id": 5578, "message": "Merge remote-tracking branch 'origin/NCover'", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-03-21 15:31:14-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-03-21 15:28:27-04:00", "committer_id": 5578, "message": "Put an upper boundary on the worst-case merge operation.\n\nSBT's need to roll over when they reach a key that represents a 10 page span in the level above them, even if they haven't reached the size limit on the current merge page. This puts an upper bound of 12 on the number of pages included in any single merge operation. If we don't do this, then high key density in mid-level pages can trigger huge merges with an unbounded number of upper level pages. I've observed cases with 100+ pages in a single merge. This wreaks havoc with disk I/O and kills performance on the local machine.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-03-21 15:28:27-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-03-21 15:19:50-04:00", "committer_id": 5578, "message": "Implement a retry loop to get rid of the Manifest file in cases where the O/S gets hung up while deleting it.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-03-21 15:19:50-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-03-06 14:02:28-05:00", "committer_id": 5578, "message": "Make sure we don't remove level 0 pages.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-03-06 14:02:28-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-03-05 17:34:55-05:00", "committer_id": 5578, "message": "Find and remove orphaned pages from the k-v store.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-03-05 17:34:55-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-03-05 11:32:28-05:00", "committer_id": 5578, "message": "Report caching statistics from the KeyValueStore.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-03-05 11:32:28-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-02-22 11:50:18-05:00", "committer_id": 5578, "message": "Revert \"Set RazorDb DataBlockCacheSize to 25Mb\"\n\nThis reverts commit 67b7616b05d12c8139b0f9084be7ffb743620efe.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-02-22 11:50:18-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-01-24 17:40:39-05:00", "committer_id": 5578, "message": "Enumerate an empty list if we pass a null starting key", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-01-24 17:40:39-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-01-22 10:42:06-05:00", "committer_id": 5578, "message": "Test for FindStartsWith", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-01-22 10:42:06-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-01-22 08:00:48-05:00", "committer_id": 5578, "message": "Added FindStartsWith for partial index lookup", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-01-22 08:00:48-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-01-22 08:00:17-05:00", "committer_id": 5578, "message": "Lower the number of manifests stored before rolling over the manifest log file.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-01-22 08:00:17-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-01-22 07:57:39-05:00", "committer_id": 5578, "message": "Add NUnit to externals.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-01-22 07:57:39-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2013-01-03 08:25:44-05:00", "committer_id": 5578, "message": "Fixed issue when a journal file is corrupted (zero-length value).", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2013-01-03 07:55:39-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-12-14 09:57:21-05:00", "committer_id": 5578, "message": "Test to confirm that indexing is fixed for large object values.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-12-14 09:57:21-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-12-14 09:36:26-05:00", "committer_id": 5578, "message": "Merge branch 'master' of github.com:gnoso/razordb", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-12-14 09:36:26-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-12-13 16:39:53-05:00", "committer_id": 5578, "message": "Convert to VS 2012 configuration.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-12-13 16:39:53-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-12-06 18:02:55-05:00", "committer_id": 5578, "message": "Rollover manifest to temp file first.\n\nUpdate the manifest rollover technique to first write to a temp file and then swap. This should prevent the case where a manifest fails during writing (i.e. out of disk space) and also fails to clean up leaving a corrupted manifest behind.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-12-06 18:02:55-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-12-06 18:00:45-05:00", "committer_id": 5578, "message": "Add a RazorUtil option to dump all of the manifest images in a manifest file.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-12-06 18:00:45-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-12-05 17:18:54-05:00", "committer_id": 5578, "message": "Prevent the TableManager.Close from running during finalization.\n\nTableManager.Close calls RunTableMergePass which does all sorts of complicated things. During finalization, some of those objects might have already been garbage collected (for example, the manifest), which makes any attempt to run the table merge risky. We still want to run this process during a normal dispose, just not during a dispose called from the finalizer.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-12-05 17:18:54-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-09-19 10:19:54-04:00", "committer_id": 5578, "message": "Remove code that subtracts old key/value size from memtable when replacing.\n\nThis is a tradeoff between the size of the journal file and the size of the SortedBlockTable file when repeatedly setting the same key over and over in the database. Having a bounded size on the Journal file is more important than making sure that SortedBlockTable files are a consistently large size. In any case, having a wider distribution of keys is more efficient than resetting the same key over and over.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-09-19 10:19:54-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-07-23 12:24:22-04:00", "committer_id": 5578, "message": "Fix errors when mixing the case of index names.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-07-23 12:24:22-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-07-17 08:15:11-04:00", "committer_id": 5578, "message": "Make sure we read the level 0 pages in newest-first order.\n\nThis prevents an inconsistency issue when issuing heavy write traffic with the same keys over and over.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-07-17 08:15:11-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-07-05 15:36:38-04:00", "committer_id": 5578, "message": "Merge branch 'master' of github.com:gnoso/razordb", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-07-05 15:36:38-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-07-05 15:36:17-04:00", "committer_id": 5578, "message": "Add some additional verification code for checking file integrity.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-07-05 15:36:17-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-05-14 17:37:33-04:00", "committer_id": 5578, "message": "Add a set lock to prevent large object writes from interleaving.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-05-14 17:37:33-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-05-14 10:34:47-04:00", "committer_id": 5578, "message": "Add more detailed error message for Corrupted block message.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-05-14 10:34:47-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-05-08 09:00:16-04:00", "committer_id": 5578, "message": "Make sure level 0 pages are merged in the order they were created.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-05-08 09:00:16-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-05-08 08:57:55-04:00", "committer_id": 5578, "message": "Make sure level 0 pages are merged in the order they were created.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-05-08 08:57:55-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-05-04 10:26:36-04:00", "committer_id": 5578, "message": "In the merge enumerator, pages were sorted by level, rather than by version. Fixed.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-05-04 10:26:36-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-05-03 17:42:31-04:00", "committer_id": 5578, "message": "Fix off by one in test.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-05-03 17:42:31-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-05-03 17:36:58-04:00", "committer_id": 5578, "message": "Remove obsolete event monitoring code from test.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-05-03 17:36:58-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-05-03 17:35:33-04:00", "committer_id": 5578, "message": "Fix an off-by-one error in the memtable enumeration.\n\n[#28993887]", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-05-03 17:35:33-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-05-02 12:16:28-04:00", "committer_id": 5578, "message": "Dispose the child enumerators and release async blocks even if an exception is thrown inside the MergeEnumerator.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-05-02 12:16:28-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-05-02 08:05:30-04:00", "committer_id": 5578, "message": "Make sure the async handles are closed when there are no records.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-05-02 08:05:30-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-05-01 15:43:53-04:00", "committer_id": 5578, "message": "Fix collision issue where tree index inside a SBT block happens to coincide with the root tree pointer.\n\nAlso, check the range of the offset before dereferencing the block (in case it's out of range).", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-05-01 15:43:53-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-04-30 08:27:38-04:00", "committer_id": 5578, "message": "Addition of RemoveFromIndex, CleanIndex methods.\n\nRemoveFromIndex removes a single record from the index and CleanIndex removes all unreferenced objects from the index. CleanIndex does not remove stale references from the index however.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-04-30 08:27:38-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-04-27 11:31:39-04:00", "committer_id": 5578, "message": "Add indexing tests.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-04-27 11:31:39-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-04-26 16:17:47-04:00", "committer_id": 5578, "message": "Simplify the merge-run locking strategy.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-04-26 16:17:47-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-04-26 15:35:33-04:00", "committer_id": 5578, "message": "Reduce the number of background threads to a minimum,\n\nand share them between instances of KeyValueStore in the same process.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-04-26 15:35:33-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-04-26 11:03:12-04:00", "committer_id": 5578, "message": "Transition TableManager thread to be external to the KeyValueStore.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-04-26 11:03:12-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-04-26 08:43:46-04:00", "committer_id": 5578, "message": "Make RazorView more usable for debugging.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-04-26 08:43:46-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-04-18 18:22:14-04:00", "committer_id": 5578, "message": "Add support for regex filter on key and value.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-04-18 18:22:14-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-04-05 14:37:02-04:00", "committer_id": 5578, "message": "Wrap up.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-04-05 14:37:02-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-04-05 11:27:59-04:00", "committer_id": 5578, "message": "Store the list of visualizers so they don't have to be reloaded constantly.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-04-05 11:27:59-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-04-04 16:07:03-04:00", "committer_id": 5578, "message": "Add analysis stuff. Left commented out, because it slowed the interface way down.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-04-04 16:07:03-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-04-04 16:06:28-04:00", "committer_id": 5578, "message": "Let us know how many visualizers were loaded.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-04-04 16:06:28-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-04-04 15:09:40-04:00", "committer_id": 5578, "message": "Add RazorView app for viewing the contents of the key value store.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-04-04 15:09:40-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-04-02 13:53:24-04:00", "committer_id": 5578, "message": "Skip the race condition tests. They are good for debugging, but too unreliable for normal use", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-04-02 13:53:24-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-04-02 13:45:13-04:00", "committer_id": 5578, "message": "Switch MemTable to a snapshot-able red-black tree, to make the MemTable enumeration more scalable.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-04-02 13:45:13-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-03-22 17:39:54-04:00", "committer_id": 5578, "message": "Allow cache to be shared across multiple key value stores.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-03-22 17:39:54-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-03-12 13:30:59-04:00", "committer_id": 5578, "message": "Revert \"Remove items from secondary index when updating or deleting.\"\n\nMoved updates to index-clean branch, so master can remain stable.\n\nThis reverts commit 9d4d6e668b36c53a6ce41e2f97be71e823dd0528.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-03-12 13:30:59-04:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-03-09 17:52:04-05:00", "committer_id": 5578, "message": "Remove items from secondary index when updating or deleting.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-03-09 17:52:04-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-03-09 15:18:09-05:00", "committer_id": 5578, "message": "Make sure data values roll off the top of the tree when overwritten or deleted.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-03-09 15:18:09-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-03-02 13:26:02-05:00", "committer_id": 5578, "message": "Add explicit check for setting data values that are larger than we can handle.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-03-02 13:26:02-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-29 15:46:11-05:00", "committer_id": 5578, "message": "Make the Enumerate resilient to simultaneous memtable rotations.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-29 15:46:11-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-29 15:20:14-05:00", "committer_id": 5578, "message": "Make the Get more resilient to simultaneous memtable rotations.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-29 15:20:14-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-29 11:36:10-05:00", "committer_id": 5578, "message": "Add license text to the files.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-29 11:36:10-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-29 11:12:20-05:00", "committer_id": 5578, "message": "Fix for enumerating over large data values.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-29 11:12:20-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-29 11:12:05-05:00", "committer_id": 5578, "message": "Test for large data enumeration.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-29 11:12:05-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-29 11:11:37-05:00", "committer_id": 5578, "message": "Consolidate duplicate code in the Enumerate method. Implement as a function of EnumerateFromKey.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-29 11:11:37-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-29 10:47:21-05:00", "committer_id": 5578, "message": "Test for large value passing...", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-29 10:47:21-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-28 18:39:31-05:00", "committer_id": 5578, "message": "Replace value and handle Get and Set logic for multi-block keys and values.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-28 18:39:31-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-28 14:45:00-05:00", "committer_id": 5578, "message": "Give Value it's own class as well.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-28 14:45:00-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-27 12:01:28-05:00", "committer_id": 5578, "message": "Fix crash test.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-27 12:01:28-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-27 11:58:32-05:00", "committer_id": 5578, "message": "Replace the ByteArray key implementation everywhere with the new Key class.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-27 11:58:32-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-27 11:04:06-05:00", "committer_id": 5578, "message": "Test for Key.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-27 11:04:06-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-26 21:52:15-05:00", "committer_id": 5578, "message": "Add key class back in.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-26 21:52:15-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-24 15:53:38-05:00", "committer_id": 5578, "message": "Add test for setting values that are larger than a block.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-24 15:53:38-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-22 11:29:35-05:00", "committer_id": 5578, "message": "Remove the dedicated Metadata cache, and reuse the normal data block cache instead.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-22 11:29:35-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-22 10:20:03-05:00", "committer_id": 5578, "message": "Clear the metadata cache when building a new table. This is mostly important in the unit tests, when a database may be regenerated over and over without unloading from memory.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-22 10:20:03-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-22 10:19:22-05:00", "committer_id": 5578, "message": "Rotate the recovered log directly rather than using the asynchronous rotation mechanism.\n\nThe built-in version modifies the manifest in a way that breaks recovery.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-22 10:19:22-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-22 09:26:25-05:00", "committer_id": 5578, "message": "Check for a left over journal from a previous in-flight rotation and make sure the rotation gets finished.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-22 09:26:25-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-22 09:22:46-05:00", "committer_id": 5578, "message": "Add test for crash during journal write.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-22 09:22:46-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-22 09:22:14-05:00", "committer_id": 5578, "message": "Add journal dump.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-22 09:22:14-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-21 18:33:44-05:00", "committer_id": 5578, "message": "Add utility to dump manifest from a razor db.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-21 18:33:44-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-21 18:33:21-05:00", "committer_id": 5578, "message": "Catch a corrupted record (at the end of a corrupted journal file) and recover from the error. Flush the journal on each write to prevent this problem from happening when the program is abnormally terminated.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-21 18:33:21-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-21 11:21:27-05:00", "committer_id": 5578, "message": "Add crash tests.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-21 11:21:27-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-21 10:39:50-05:00", "committer_id": 5578, "message": "Add caching for asynchronous block reads.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-21 10:39:50-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-21 10:39:29-05:00", "committer_id": 5578, "message": "Add more tests to verify high throughput reading.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-21 10:39:29-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-21 08:17:19-05:00", "committer_id": 5578, "message": "Merge branch 'cache'", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-21 08:17:19-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-21 08:16:47-05:00", "committer_id": 5578, "message": "Clear offsets in between blocks.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-21 08:16:47-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-21 08:16:05-05:00", "committer_id": 5578, "message": "Table dump code in SBT.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-21 08:16:05-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-21 08:15:39-05:00", "committer_id": 5578, "message": "Quick and dirty table dump tool.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-21 08:15:39-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-20 18:34:43-05:00", "committer_id": 5578, "message": "WIP: Tweaks to the block Search algorithm.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-20 18:34:43-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-20 18:22:15-05:00", "committer_id": 5578, "message": "Fix up tree creation code.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-20 18:22:15-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-20 18:05:17-05:00", "committer_id": 5578, "message": "Add row header to signal the start of each record. Tweak the scan logic and the enumeration logic to parse the new bytes properly.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-20 18:05:17-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-20 13:20:16-05:00", "committer_id": 5578, "message": "Add pointers to the block table to allow us to represent the block as a binary tree. Adjust writing and parsing code.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-20 13:20:16-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-20 12:42:01-05:00", "committer_id": 5578, "message": "Keep hot blocks in memory.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-20 12:42:01-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-20 12:22:35-05:00", "committer_id": 5578, "message": "Sprinkle RazorCache throughout the SortedBlockTable infrastructure in preparation for caching read blocks.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-20 12:22:35-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-20 12:21:55-05:00", "committer_id": 5578, "message": "Switch to cache to string key instead of ByteArray.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-20 12:21:55-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-20 11:33:34-05:00", "committer_id": 5578, "message": "Don't allow the cache to double set values.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-20 11:33:34-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-20 11:14:40-05:00", "committer_id": 5578, "message": "Fix enumerator race condition when trying to get a snapshot of the internal memtable.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-20 11:14:40-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-20 11:11:40-05:00", "committer_id": 5578, "message": "Add LRU cache implementation, and replace the IndexCache.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-20 11:11:40-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-20 07:48:36-05:00", "committer_id": 5578, "message": "WIP: Add block cache, and overhaul the index cache.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-20 07:48:36-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-20 07:48:09-05:00", "committer_id": 5578, "message": "Lazy open the internal filestream in SortedBlockTable.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-20 07:48:09-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-19 15:12:29-05:00", "committer_id": 5578, "message": "cache the metadata so we don't have to read it off disk in every get.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-19 15:12:29-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-19 15:11:01-05:00", "committer_id": 5578, "message": "Add a test for fileopen speed since that happens in every lookup/get.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-19 15:11:01-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-17 17:29:32-05:00", "committer_id": 5578, "message": "Memory savings. Believe it or not, string.format uses a lot of memory in this case.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-17 17:29:32-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-17 17:29:28-05:00", "committer_id": 5578, "message": "Remove SkipList.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-17 17:29:28-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-16 14:26:45-05:00", "committer_id": 5578, "message": "Fix index lookup logic to account for keys that happen to start with the same prefix.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-16 14:26:45-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-16 11:43:08-05:00", "committer_id": 5578, "message": "Make sure we close the SBT instances after Enumerating!", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-16 11:43:08-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-16 11:42:50-05:00", "committer_id": 5578, "message": "Consolidate the Enumerate and EnumerateFromKey implementations.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-16 11:42:50-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-15 23:34:00-05:00", "committer_id": 5578, "message": "Fix up some of the manifest AddRefs/Releases", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-15 23:34:00-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-15 17:46:16-05:00", "committer_id": 5578, "message": "WIP: Manifest Redesign.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-15 17:46:16-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-15 11:58:10-05:00", "committer_id": 5578, "message": "Change the Find() method to return the key in addition to the value.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-15 11:58:10-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-15 11:57:44-05:00", "committer_id": 5578, "message": "Clone the logger and add Refcount to debugging info.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-15 11:57:44-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-15 11:57:00-05:00", "committer_id": 5578, "message": "Add strong name.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-15 11:57:00-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-14 15:27:19-05:00", "committer_id": 5578, "message": "Fix test to make sure we converting a 4-byte int. :-)", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-14 15:27:19-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-14 15:20:24-05:00", "committer_id": 5578, "message": "Fix an issue with manifest snapshots not been created properly and AddRefs on Pages not working.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-14 15:20:24-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-14 08:36:43-05:00", "committer_id": 5578, "message": "Tidy up the truncate method. Add test.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-14 08:36:43-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-13 21:58:53-05:00", "committer_id": 5578, "message": "Add basic indexing implementation.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-13 21:58:53-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-13 17:38:07-05:00", "committer_id": 5578, "message": "Clean up the semaphore in the Close so we don't block multiple closes.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-13 17:38:07-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-13 16:56:23-05:00", "committer_id": 5578, "message": "Take version back out of MemTable. Not needed anymore.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-13 16:56:23-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-13 15:37:36-05:00", "committer_id": 5578, "message": "More enumeration testing.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-13 15:37:36-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-13 15:37:27-05:00", "committer_id": 5578, "message": "Make sure the rotation lock doesn't get orphaned and prevent the KeyValueStore from closing.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-13 15:37:27-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-13 12:03:36-05:00", "committer_id": 5578, "message": "Added EnumerateFromKey.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-13 12:03:36-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-12 23:12:13-05:00", "committer_id": 5578, "message": "Basic implementation of enumeration over the key store.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-12 23:12:13-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-12 20:50:04-05:00", "committer_id": 5578, "message": "Enforce ranking of keys by level and subsequently by version, so that updated values get properly merged out of higher levels.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-12 20:50:04-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-12 20:48:09-05:00", "committer_id": 5578, "message": "Allow a default(T) instance of ByteArray to be used in a comparison.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-12 20:48:09-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-12 12:58:45-05:00", "committer_id": 5578, "message": "Allow PageRefs to be sorted by merge priority.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-12 12:58:45-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-12 12:49:38-05:00", "committer_id": 5578, "message": "Clean up EnumerateMergedTables", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-12 12:49:38-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-10 20:27:20-05:00", "committer_id": 5578, "message": "Add test to highlight merge duplicates problem.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-10 20:27:20-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-10 20:26:54-05:00", "committer_id": 5578, "message": "Add MemTable enumeration.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-10 20:26:54-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-10 14:56:57-05:00", "committer_id": 5578, "message": "Mass delete test.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-10 14:56:57-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-10 12:11:54-05:00", "committer_id": 5578, "message": "Get the locking right to allow only one memtable rotation to be in flight at a time, while at the same time not blocking new set operations until we get more than one rotation level deep.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-10 12:11:54-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-10 10:17:36-05:00", "committer_id": 5578, "message": "Simplify the locking strategy for memtables that are in rotation. Check tables that are in rotation for values in the Get(). Add tests for rotation race conditions.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-10 10:17:36-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-09 18:25:25-05:00", "committer_id": 5578, "message": "Test and fix for mem table rotation race condition.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-09 18:25:25-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-09 18:24:43-05:00", "committer_id": 5578, "message": "Fix issue if data falls exactly on a block boundary.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-09 18:24:43-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-09 16:06:29-05:00", "committer_id": 5578, "message": "Add SkipList data structure to the project.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-09 16:06:29-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-08 16:34:45-05:00", "committer_id": 5578, "message": "WIP: Add delete functionality with tests.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-08 16:34:45-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-08 15:40:01-05:00", "committer_id": 5578, "message": "Add test for multi-threaded get.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-08 15:40:01-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-08 15:39:51-05:00", "committer_id": 5578, "message": "Add extra directory to sort databases out.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-08 15:39:51-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-08 14:42:27-05:00", "committer_id": 5578, "message": "Add Truncate feature to delete all the data files and start over.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-08 14:42:27-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-08 11:39:27-05:00", "committer_id": 5578, "message": "Fix bug: manifest pages not being AddRef'd when read from disk.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-08 11:39:27-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-08 11:38:17-05:00", "committer_id": 5578, "message": "During lookup, scan keys in block rather than reallocating.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-08 11:38:17-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-08 11:15:42-05:00", "committer_id": 5578, "message": "Add atomic snapshotting for manifest. Reference count the pages, so we know when it is safe to delete them.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-08 11:15:42-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-07 18:28:59-05:00", "committer_id": 5578, "message": "Tweak the \"remerging while querying\" tests.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-07 18:28:59-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-07 17:40:36-05:00", "committer_id": 5578, "message": "Drastically reduce the allocation pressure of the algorithms.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-07 17:40:36-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-06 15:08:16-05:00", "committer_id": 5578, "message": "Add some basic logging. Fix lookup algorithm to climb the tiers.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-06 15:08:16-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-06 15:07:05-05:00", "committer_id": 5578, "message": "Fix max page for level.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-06 15:07:05-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-06 06:01:39-05:00", "committer_id": 5578, "message": "Add tests for bulk getting after set.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-06 06:01:39-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-05 02:55:27-05:00", "committer_id": 5578, "message": "Merge up the other levels past zero. Rotate merge blocks among level keys. Wait for TableManager to complete in KeyValueStore.Close.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-05 02:55:27-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-05 00:00:39-05:00", "committer_id": 5578, "message": "Page 0 table manager implementation.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-05 00:00:39-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-03 18:36:49-05:00", "committer_id": 5578, "message": "Fix multi-thread rollover. Add Table Manager class.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-03 18:36:49-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-03 16:52:23-05:00", "committer_id": 5578, "message": "Add atomic page index operations to the manifest.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-03 16:52:23-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-03 15:34:54-05:00", "committer_id": 5578, "message": "Committed table merge operation.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-03 15:34:54-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-03 14:54:47-05:00", "committer_id": 5578, "message": "Fixes to the merge enumerator and tests for merged reading of sorted block tables.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-03 14:54:47-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-03 11:52:21-05:00", "committer_id": 5578, "message": "Merge Enumerator!", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-03 11:52:21-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-03 08:10:55-05:00", "committer_id": 5578, "message": "Adding Level Merge Tests.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-03 08:10:55-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-02 18:38:07-05:00", "committer_id": 5578, "message": "Implement table scan starting from an indexed key.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-02 18:38:07-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-02 17:53:41-05:00", "committer_id": 5578, "message": "Multi-Threaded Random Read test.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-02 17:53:41-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-02 17:44:51-05:00", "committer_id": 5578, "message": "Cache the index for each file.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-02 17:44:51-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-02 17:41:09-05:00", "committer_id": 5578, "message": "Implement Random lookups with a key index on each block table.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-02 17:41:09-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-02 11:10:37-05:00", "committer_id": 5578, "message": "Change the memtable to allow the datastore to accomodate resetting items within a single memtable storage window.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-02 11:10:37-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-02 11:10:04-05:00", "committer_id": 5578, "message": "When restarting the datastore, make sure to read the Journal to prime the memtable.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-02 11:10:04-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-02 09:50:00-05:00", "committer_id": 5578, "message": "Allow Manifest to grow as a log for 1000 items before rolling over to speed up the commit time.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-02 09:50:00-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-01 18:38:21-05:00", "committer_id": 5578, "message": "Initial committed manifest implementation.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-01 18:38:21-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-01 15:07:03-05:00", "committer_id": 5578, "message": "Start metadata manifest.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-01 15:07:03-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-01 12:01:22-05:00", "committer_id": 5578, "message": "Support Reading Journal back into MemTable.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-01 12:01:22-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-01 11:21:14-05:00", "committer_id": 5578, "message": "Support multi-threaded writes.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-01 11:21:14-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-01 09:13:40-05:00", "committer_id": 5578, "message": "Consolidate the Journal and MemTable into a JournaledMemTable unit.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-01 09:13:40-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-02-01 06:21:57-05:00", "committer_id": 5578, "message": "Duh start the thread.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-02-01 06:21:57-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-01-31 19:26:33-05:00", "committer_id": 5578, "message": "Changes to work on Mac.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-01-31 19:26:33-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-01-31 18:48:13-05:00", "committer_id": 5578, "message": "Make sure the write to the journal happens first.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-01-31 18:48:13-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-01-31 18:46:43-05:00", "committer_id": 5578, "message": "Add journal to keep track of writes as they are added.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-01-31 18:46:43-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-01-31 18:46:10-05:00", "committer_id": 5578, "message": "Make sure sstable writes are serialized.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-01-31 18:46:10-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-01-31 16:13:36-05:00", "committer_id": 5578, "message": "Add Tests to read individual blocks as well as scan sorted block table files.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-01-31 16:13:36-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-01-31 13:10:22-05:00", "committer_id": 5578, "message": "Write memtable to a sorted block table.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-01-31 13:10:22-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-01-31 11:43:17-05:00", "committer_id": 5578, "message": "Add tests and implementation for memtable.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-01-31 11:43:17-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-01-31 11:42:58-05:00", "committer_id": 5578, "message": "Fix comparison of byte Arrays.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-01-31 11:42:58-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 3310149, "repo_owner_id": 6789, "commit_at": "2012-01-30 18:45:48-05:00", "committer_id": 5578, "message": "Initial Checkin. Time to spike.", "repo_description": "RazorDB is a lightweight, fast, embedded key value store, written in C#.", "generate_at": "2012-01-30 18:45:48-05:00", "author_id": 5578, "repo_name": "gnoso/razordb"}, {"repo_id": 62620160, "repo_owner_id": 6154722, "commit_at": "2018-01-18 22:09:08.000+05:30", "committer_id": 18569990, "message": "Guidelines for a TestCase's FullyQualifiedName (#95)\n\n* Add commentary highlighting the C# & VB specific nature of the guidelines.", "repo_description": "Documentation for the Visual Studio Test Platform. ", "generate_at": "2018-01-18 11:39:08.000-05:00", "author_id": 5578, "repo_name": "Microsoft/vstest-docs"}, {"repo_id": 112373165, "repo_owner_id": 34072090, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "gauss77/go"}, {"repo_id": 112373165, "repo_owner_id": 34072090, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "gauss77/go"}, {"repo_id": 112373165, "repo_owner_id": 34072090, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "gauss77/go"}, {"repo_id": 112373165, "repo_owner_id": 34072090, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "gauss77/go"}, {"repo_id": 95022284, "repo_owner_id": 567900, "commit_at": "2017-06-21 13:35:00.000-04:00", "committer_id": 567900, "message": "encoding/json: Optionally preserve the key order of JSON objects\n\nBy default, JSON objects are decoded into an interface{} as a\nmap[string]interface{}, which discards the order of keys in the original object,\ndue to the randomized order of Go maps.\n\nThis CL implements an optional OrderedObject type as well as UseOrderedType on\nthe JSON Decoder to allow preservation of key order. This has no effect on\nexisting code. It is opt-in only.\n\nThis CL also supports encoding JSON objects in a determined order using the\nOrderedObject type.", "repo_description": "A fork of the golang encoding/json package to support ordered JSON decoding/encoding", "generate_at": "2017-06-21 13:17:30.000-04:00", "author_id": 5578, "repo_name": "virtuald/go-ordered-json"}, {"repo_id": 95022284, "repo_owner_id": 567900, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "A fork of the golang encoding/json package to support ordered JSON decoding/encoding", "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "virtuald/go-ordered-json"}, {"repo_id": 95022284, "repo_owner_id": 567900, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "A fork of the golang encoding/json package to support ordered JSON decoding/encoding", "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "virtuald/go-ordered-json"}, {"repo_id": 95022284, "repo_owner_id": 567900, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "A fork of the golang encoding/json package to support ordered JSON decoding/encoding", "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "virtuald/go-ordered-json"}, {"repo_id": 136803298, "repo_owner_id": 862300, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "golang FileServer implementation that uses JSON for directory listing, instead of HTML", "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "jasonwbarnett/fileserver"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-13 15:33:12-04:00", "committer_id": 5578, "message": "Add test for nested Scans", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-13 15:33:12-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-13 13:31:16-04:00", "committer_id": 5578, "message": "Add go syntax highlighting marker", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-13 13:31:16-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-13 13:29:41-04:00", "committer_id": 5578, "message": "Add more examples to README", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-13 13:29:41-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-13 13:22:36-04:00", "committer_id": 5578, "message": "Make  variable name consistent", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-13 13:22:36-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-13 13:20:48-04:00", "committer_id": 5578, "message": "Update api, examples and docs. Allow DecoderAction to return an error.", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-13 13:20:48-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-12 18:12:29-04:00", "committer_id": 5578, "message": "Add actions to parse select chunks of a JSON stream while scanning forward.", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-12 18:12:29-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-05 11:12:06-04:00", "committer_id": 5578, "message": "Rename to reduce confusion.", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-05 11:12:06-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-05 10:40:12-04:00", "committer_id": 5578, "message": "Improve documentation.", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-05 10:15:25-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-05 07:12:26-04:00", "committer_id": 5578, "message": "Another array test.", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-05 07:12:26-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-04 22:38:33-04:00", "committer_id": 5578, "message": "Merge branch 'master' of github.com:exponent-io/json-seek", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-04 22:38:33-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-04 22:38:06-04:00", "committer_id": 5578, "message": "Fix array traversal tests. Reorganize code. Remove dead code.", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-04 22:38:06-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-04 22:22:20-04:00", "committer_id": 5578, "message": "Major rework of the decoder; tracking Path for each Token()", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-04 22:22:20-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-03 18:24:55-04:00", "committer_id": 5578, "message": "Update README.md", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-03 18:24:55-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-03 18:08:10-04:00", "committer_id": 5578, "message": "Update the docs, clarify some of the descriptions.", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-03 18:08:10-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-03 17:57:35-04:00", "committer_id": 5578, "message": "Update README", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-03 17:57:35-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-03 17:45:37-04:00", "committer_id": 5578, "message": "Rename travis.yml", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-03 17:45:37-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-03 17:44:14-04:00", "committer_id": 5578, "message": "Setup Travis-CI", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-03 17:44:14-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-03 17:36:43-04:00", "committer_id": 5578, "message": "Rename to SeekingDecoder", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-03 17:36:43-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-03 17:26:11-04:00", "committer_id": 5578, "message": "Fix case where value string could be confused for a key string.", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-03 17:24:10-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-03 17:22:47-04:00", "committer_id": 5578, "message": "Mixin the Decoder.", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-03 17:22:47-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-03 12:14:22-04:00", "committer_id": 5578, "message": "Fix all the walker tests.", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-03 12:14:22-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-02 18:20:02-04:00", "committer_id": 5578, "message": "Extract rough traversal code from json library.", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-02 18:20:02-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 43571861, "repo_owner_id": 14945810, "commit_at": "2015-10-02 15:21:32-04:00", "committer_id": 5578, "message": "Initial commit", "repo_description": "Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens. ", "generate_at": "2015-10-02 15:21:32-04:00", "author_id": 5578, "repo_name": "exponent-io/jsonpath"}, {"repo_id": 47227973, "repo_owner_id": 10872782, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "riscv/riscv-go"}, {"repo_id": 47227973, "repo_owner_id": 10872782, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "riscv/riscv-go"}, {"repo_id": 47227973, "repo_owner_id": 10872782, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "riscv/riscv-go"}, {"repo_id": 47227973, "repo_owner_id": 10872782, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "riscv/riscv-go"}, {"repo_id": 84528499, "repo_owner_id": 8464746, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Madhur Go language", "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "madhur-bvcoe/MyG0"}, {"repo_id": 84528499, "repo_owner_id": 8464746, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Madhur Go language", "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "madhur-bvcoe/MyG0"}, {"repo_id": 84528499, "repo_owner_id": 8464746, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "Madhur Go language", "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "madhur-bvcoe/MyG0"}, {"repo_id": 84528499, "repo_owner_id": 8464746, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "Madhur Go language", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "madhur-bvcoe/MyG0"}, {"repo_id": 11792045, "repo_owner_id": 1214129, "commit_at": "2013-07-31 09:32:18-04:00", "committer_id": 5578, "message": "Initial fork of go-avltree", "repo_description": "A fork of go-avltree", "generate_at": "2013-07-31 09:32:18-04:00", "author_id": 5578, "repo_name": "T145/go-avltree"}, {"repo_id": 104428505, "repo_owner_id": 32046402, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "roperluo32/go_with_annotation"}, {"repo_id": 104428505, "repo_owner_id": 32046402, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "roperluo32/go_with_annotation"}, {"repo_id": 104428505, "repo_owner_id": 32046402, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "roperluo32/go_with_annotation"}, {"repo_id": 104428505, "repo_owner_id": 32046402, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "roperluo32/go_with_annotation"}, {"repo_id": 102246698, "repo_owner_id": 15064823, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "codesome/go"}, {"repo_id": 102246698, "repo_owner_id": 15064823, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "codesome/go"}, {"repo_id": 102246698, "repo_owner_id": 15064823, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "codesome/go"}, {"repo_id": 102246698, "repo_owner_id": 15064823, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "codesome/go"}, {"repo_id": 37038121, "repo_owner_id": 578256, "commit_at": "2016-03-18 11:22:33-04:00", "committer_id": 5578, "message": "Add DNS challenge provider for Google Cloud DNS\n\nUse GCE_PROJECT to designate your GCE project.\n\nAuthentication is automatically picked up from gcloud credentials if\nrunning locally and from GCE metadata if run within Google Cloud.\n\nRequires at least permission scope\n\"https://www.googleapis.com/auth/ndev.clouddns.readwrite\"", "repo_description": "Let's Encrypt client and ACME library written in Go", "generate_at": "2016-03-18 11:22:33-04:00", "author_id": 5578, "repo_name": "xenolf/lego"}, {"repo_id": 129652777, "repo_owner_id": 18194126, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "MeABc/go"}, {"repo_id": 129652777, "repo_owner_id": 18194126, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "MeABc/go"}, {"repo_id": 129652777, "repo_owner_id": 18194126, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "MeABc/go"}, {"repo_id": 129652777, "repo_owner_id": 18194126, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "MeABc/go"}, {"repo_id": 36905588, "repo_owner_id": 609046, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "This is a fork of https://github.com/golang/go which tries to go into different direction. Not intended to be merged back, because it goes against Go core design.", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "waterlink/go"}, {"repo_id": 139302540, "repo_owner_id": 11911600, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "mirror from  https://go.googlesource.com/go", "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "liuyanhit/golang"}, {"repo_id": 139302540, "repo_owner_id": 11911600, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "mirror from  https://go.googlesource.com/go", "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "liuyanhit/golang"}, {"repo_id": 139302540, "repo_owner_id": 11911600, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": "mirror from  https://go.googlesource.com/go", "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "liuyanhit/golang"}, {"repo_id": 139302540, "repo_owner_id": 11911600, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "mirror from  https://go.googlesource.com/go", "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "liuyanhit/golang"}, {"repo_id": 141289443, "repo_owner_id": 925351, "commit_at": "2015-06-18 17:59:42.000Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30.000-04:00", "author_id": 5578, "repo_name": "dave/golib"}, {"repo_id": 141289443, "repo_owner_id": 925351, "commit_at": "2015-04-29 22:58:37.000Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38.000-04:00", "author_id": 5578, "repo_name": "dave/golib"}, {"repo_id": 141289443, "repo_owner_id": 925351, "commit_at": "2015-07-28 02:51:55.000Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53.000-04:00", "author_id": 5578, "repo_name": "dave/golib"}, {"repo_id": 141289443, "repo_owner_id": 925351, "commit_at": "2015-07-27 16:07:39.000Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32.000-04:00", "author_id": 5578, "repo_name": "dave/golib"}, {"repo_id": 40381168, "repo_owner_id": 67496, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": "go ssa worktree", "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "josharian/go.ssa"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-03-10 17:09:44-05:00", "committer_id": 5578, "message": "Only create types for struct declarations. Allow for empty struct.", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-03-10 17:09:44-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-02-16 13:55:55-05:00", "committer_id": 5578, "message": "Add support for json.RawMessage, byte[], and time.Time", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-02-16 13:55:55-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-02-16 13:40:03-05:00", "committer_id": 5578, "message": "Add dumpast command.", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-02-16 13:40:03-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-02-15 18:21:32-05:00", "committer_id": 5578, "message": "Initial conversion of go structs to typescript interfaces.", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-02-15 18:21:32-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-02-15 18:20:35-05:00", "committer_id": 5578, "message": "Command boilerplate.", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-02-15 18:20:35-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-01-31 11:53:02-05:00", "committer_id": 5578, "message": "Handle fields with pointer types.", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-01-31 11:53:02-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-01-30 23:21:04-05:00", "committer_id": 5578, "message": "Initial conversion.", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-01-30 23:21:04-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-04-11 18:41:28-04:00", "committer_id": 5578, "message": "generate a reflection table to instantiate types by name.\"", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-04-11 18:41:28-04:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-02-16 17:22:06-05:00", "committer_id": 5578, "message": "Remove reflection-based code.", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-02-16 17:22:06-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-02-16 13:41:19-05:00", "committer_id": 5578, "message": "Handle interface{}", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-02-16 13:41:19-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-02-16 13:41:08-05:00", "committer_id": 5578, "message": "Properly handle empty and string types.", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-02-16 13:41:08-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-02-16 13:40:45-05:00", "committer_id": 5578, "message": "Don't write out types that have no fields.", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-02-16 13:40:45-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-02-16 12:26:27-05:00", "committer_id": 5578, "message": "Add support for string constant declarations.", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-02-16 12:26:27-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-02-15 18:48:06-05:00", "committer_id": 5578, "message": "Clean up. Add basic test.", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-02-15 18:48:06-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-02-15 18:21:02-05:00", "committer_id": 5578, "message": "Handle json tag parsing the same as encoding/json and reflect.", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-02-15 18:21:02-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-02-15 18:20:10-05:00", "committer_id": 5578, "message": "Move aside current reflect-based code.", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-02-15 18:20:10-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-01-31 11:57:55-05:00", "committer_id": 5578, "message": "Map interface{} to 'any' type.", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-01-31 11:57:55-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-01-31 11:53:12-05:00", "committer_id": 5578, "message": "Merge branch 'master' of github.com:exponent-io/gots", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-01-31 11:53:12-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-01-30 23:41:12-05:00", "committer_id": 5578, "message": "Update README.md", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-01-30 23:41:12-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-01-30 23:40:09-05:00", "committer_id": 5578, "message": "Fixe tests for optional fields.", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-01-30 23:40:09-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-01-30 23:36:27-05:00", "committer_id": 5578, "message": "wrong filename", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-01-30 23:36:27-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-01-30 23:35:25-05:00", "committer_id": 5578, "message": "Add travis build file", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-01-30 23:35:25-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-01-30 23:33:07-05:00", "committer_id": 5578, "message": "support optional fields with 'omitempty'", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-01-30 23:33:07-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 50746271, "repo_owner_id": 14945810, "commit_at": "2016-01-30 16:43:15-05:00", "committer_id": 5578, "message": "Initial commit", "repo_description": "Go JSON to TypeScript converter", "generate_at": "2016-01-30 16:43:15-05:00", "author_id": 5578, "repo_name": "exponent-io/gots"}, {"repo_id": 63391041, "repo_owner_id": 20453940, "commit_at": "2015-07-28 02:51:55Z", "committer_id": 104030, "message": "encoding/json: fix EOF bug decoding HTTP stream\n\nFixes bug referenced in this thread on golang-dev:\nhttps://groups.google.com/d/topic/golang-dev/U4LSpMzL82c/discussion\n\nChange-Id: If01a2644863f9e5625dd2f95f9d344bda772e12c\nReviewed-on: https://go-review.googlesource.com/12726\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-07-27 21:33:53-04:00", "author_id": 5578, "repo_name": "pk-codebox-evo/Go"}, {"repo_id": 63391041, "repo_owner_id": 20453940, "commit_at": "2015-06-18 17:59:42Z", "committer_id": 104030, "message": "encoding/json: Remove extra allocation in scanner.\n\nWhen the scanner receives a non-whitespace character in stateEndTop,\nit creates an error message and caches it to return on the next\ntransition. nextValue() uses the scanner to sub-scan for a value\ninside a larger JSON structure. Since stateEndTop is triggered\n*after* the ending byte, whatever character immediately follows the\nsub-value gets pulled into the scanner's state machine as well.\nEven though it is not used and doesn't cause an error, it does\ncause the state machine to allocate an error that will never be used.\n\nThe fix is to probe the state machine with whitespace after\nscanEndObject or scanEndArray to see if the next character would\nresult in a scanEnd state transition. If so, we can return right\naway without processing the next character and avoid triggering\nan allocation.\n\nbenchmark                       old ns/op     new ns/op     delta\nBenchmarkCodeEncoder            17022194      16611336      -2.41%\nBenchmarkCodeMarshal            18443250      18090144      -1.91%\nBenchmarkCodeDecoder            61502053      61010936      -0.80%\nBenchmarkCodeUnmarshal          61410829      60363605      -1.71%\nBenchmarkCodeUnmarshalReuse     59124836      58361772      -1.29%\nBenchmarkUnmarshalString        602           603           +0.17%\nBenchmarkUnmarshalFloat64       535           537           +0.37%\nBenchmarkUnmarshalInt64         482           482           +0.00%\nBenchmarkIssue10335             1206          799           -33.75%\nBenchmarkSkipValue              17605751      18355391      +4.26%\nBenchmarkEncoderEncode          612           604           -1.31%\n\nbenchmark                  old MB/s     new MB/s     speedup\nBenchmarkCodeEncoder       114.00       116.82       1.02x\nBenchmarkCodeMarshal       105.21       107.27       1.02x\nBenchmarkCodeDecoder       31.55        31.81        1.01x\nBenchmarkCodeUnmarshal     31.60        32.15        1.02x\nBenchmarkSkipValue         111.63       107.07       0.96x\n\nbenchmark                  old allocs     new allocs     delta\nBenchmarkIssue10335        11             4              -63.64%\nBenchmarkEncoderEncode     2              2              +0.00%\n\nbenchmark                  old bytes     new bytes     delta\nBenchmarkIssue10335        376           272           -27.66%\nBenchmarkEncoderEncode     40            40            +0.00%\n\nFixes #10335\n\nChange-Id: I3d4f2b67f7a038adfb33ba48bb6b680f528baf18\nReviewed-on: https://go-review.googlesource.com/9074\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 05:30:30-04:00", "author_id": 5578, "repo_name": "pk-codebox-evo/Go"}, {"repo_id": 63391041, "repo_owner_id": 20453940, "commit_at": "2015-07-27 16:07:39Z", "committer_id": 104030, "message": "encoding/json: add JSON streaming parse API\n\nThis change adds new methods to Decoder.\n\n * Decoder.Token steps through a JSON document, returning a value for each token.\n * Decoder.Decode unmarshals the entire value at the token stream's current\n   position (in addition to its existing function in a stream of JSON values)\n\nFixes #6050.\nFixes #6499.\n\nChange-Id: Iff283e0e7b537221ae256392aca6529f06ebe211\nReviewed-on: https://go-review.googlesource.com/9073\nReviewed-by: Russ Cox <rsc@golang.org>", "repo_description": null, "generate_at": "2015-04-18 03:23:32-04:00", "author_id": 5578, "repo_name": "pk-codebox-evo/Go"}, {"repo_id": 63391041, "repo_owner_id": 20453940, "commit_at": "2015-04-29 22:58:37Z", "committer_id": 2621, "message": "net/http: Don't set Content-Length: -1 when responding to a POST\n\nFixes an issue where Response.Write writes out a Content-Length: -1\nheader when the corresponding Request is a POST or PUT and the\nContentLength was not previously set.\n\nThis was encountered when using httputil.DumpResponse\nto write out the response from a server that responded to a PUT\nrequest with no Content-Length header. The dumped output is\nthus invalid.\n\nChange-Id: I52c6ae8ef3443f1f9de92aeee9f9581dabb05991\nReviewed-on: https://go-review.googlesource.com/9496\nReviewed-by: Brad Fitzpatrick <bradfitz@golang.org>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>", "repo_description": null, "generate_at": "2015-04-29 16:59:38-04:00", "author_id": 5578, "repo_name": "pk-codebox-evo/Go"}], "bio": null, "commits": 554, "company": "@Microsoft ", "following_list": [1, 2, 127, 250, 647, 5594], "public_gists": 2, "name": "Peter Waldschmidt", "created_at": "2008-04-07 13:12:47", "email": "github-public@pbw.me", "following": 6, "login": "peterwald", "repo_list": [{"fork": true, "license": "Apache License 2.0", "has_wiki": true, "description": "Image build contents for Kubernetes applications.", "language": "Shell", "default_branch": "master", "created_at": "2017-07-12 19:28:08", "forks_count": 0, "updated_at": "2017-07-12 19:28:10", "pushed_at": "2016-12-08 01:44:29", "full_name": "peterwald/application-images", "open_issues": 0, "stargazers_count": 0, "owner_id": 5578, "id": 97044755, "size": 30}, {"fork": false, "license": "MIT License", "has_wiki": true, "description": null, "language": "CoffeeScript", "default_branch": "master", "created_at": "2015-08-11 12:54:44", "forks_count": 0, "updated_at": "2015-08-11 12:55:31", "pushed_at": "2015-08-12 13:20:46", "full_name": "peterwald/buffer-pos", "open_issues": 0, "stargazers_count": 0, "owner_id": 5578, "id": 40541596, "size": 120}, {"fork": true, "license": null, "has_wiki": true, "description": "Cecil is a library to generate and inspect programs and libraries in the ECMA CIL form.", "language": "C#", "default_branch": "master", "created_at": "2010-05-13 19:52:30", "forks_count": 1, "updated_at": "2012-12-14 16:50:18", "pushed_at": "2010-05-12 16:08:42", "full_name": "peterwald/cecil", "open_issues": 0, "stargazers_count": 1, "owner_id": 5578, "id": 665177, "size": 457}, {"fork": true, "license": "Apache License 2.0", "has_wiki": true, "description": "This is a place for various components in the Kubernetes ecosystem that aren't part of the Kubernetes core. Consider creating a new repo instead.", "language": "Go", "default_branch": "master", "created_at": "2017-05-24 15:09:39", "forks_count": 0, "updated_at": "2017-05-24 15:09:43", "pushed_at": "2017-05-23 05:14:57", "full_name": "peterwald/contrib", "open_issues": 0, "stargazers_count": 0, "owner_id": 5578, "id": 92305922, "size": 83867}, {"fork": true, "license": "Apache License 2.0", "has_wiki": true, "description": "Registry server for Docker (hosting/delivering of repositories and images)", "language": null, "default_branch": "master", "created_at": "2014-09-02 22:54:53", "forks_count": 0, "updated_at": "2014-11-11 23:37:36", "pushed_at": "2014-09-03 15:15:30", "full_name": "peterwald/docker-registry", "open_issues": 0, "stargazers_count": 0, "owner_id": 5578, "id": 23598471, "size": 692}, {"fork": true, "license": "Other", "has_wiki": true, "description": "Cap'n Proto library and parser for go", "language": "Go", "default_branch": "master", "created_at": "2013-11-17 16:57:49", "forks_count": 0, "updated_at": "2013-11-25 11:31:47", "pushed_at": "2013-11-24 15:17:35", "full_name": "peterwald/go-capnproto", "open_issues": 0, "stargazers_count": 0, "owner_id": 5578, "id": 14470705, "size": 370}, {"fork": true, "license": "MIT License", "has_wiki": true, "description": "JSON-Schema + fake data generators", "language": "JavaScript", "default_branch": "master", "created_at": "2017-02-21 20:52:05", "forks_count": 0, "updated_at": "2017-02-21 20:52:07", "pushed_at": "2017-02-22 15:07:58", "full_name": "peterwald/json-schema-faker", "open_issues": 0, "stargazers_count": 0, "owner_id": 5578, "id": 82725918, "size": 17178}, {"fork": true, "license": null, "has_wiki": true, "description": "compile json schema to typescript typings", "language": "TypeScript", "default_branch": "master", "created_at": "2016-07-28 21:07:54", "forks_count": 0, "updated_at": "2016-07-28 21:07:55", "pushed_at": "2016-07-22 05:24:59", "full_name": "peterwald/json-schema-to-typescript", "open_issues": 0, "stargazers_count": 0, "owner_id": 5578, "id": 64428341, "size": 59}, {"fork": true, "license": "MIT License", "has_wiki": true, "description": "Let's Encrypt client and ACME library written in Go", "language": "Go", "default_branch": "master", "created_at": "2016-02-26 23:13:58", "forks_count": 0, "updated_at": "2016-02-26 23:13:59", "pushed_at": "2016-03-18 15:26:40", "full_name": "peterwald/lego", "open_issues": 0, "stargazers_count": 0, "owner_id": 5578, "id": 52638869, "size": 419}, {"fork": true, "license": "Other", "has_wiki": true, "description": "Parse-compatible API server module for Node/Express", "language": "JavaScript", "default_branch": "master", "created_at": "2016-09-07 15:35:48", "forks_count": 0, "updated_at": "2016-09-07 15:35:50", "pushed_at": "2016-09-07 16:18:09", "full_name": "peterwald/parse-server", "open_issues": 0, "stargazers_count": 0, "owner_id": 5578, "id": 67620306, "size": 2792}, {"fork": true, "license": null, "has_wiki": true, "description": "Checkbox component for React native", "language": "JavaScript", "default_branch": "master", "created_at": "2016-07-05 19:26:30", "forks_count": 0, "updated_at": "2016-07-05 19:26:31", "pushed_at": "2016-06-03 07:17:43", "full_name": "peterwald/react-native-checkbox", "open_issues": 0, "stargazers_count": 0, "owner_id": 5578, "id": 62663615, "size": 34}, {"fork": true, "license": "MIT License", "has_wiki": true, "description": "Ruby/Git is a Ruby library that can be used to create, read and manipulate Git repositories by wrapping system calls to the git binary.", "language": "Ruby", "default_branch": "master", "created_at": "2009-02-17 02:29:34", "forks_count": 1, "updated_at": "2017-12-15 17:22:11", "pushed_at": "2009-02-22 23:37:09", "full_name": "peterwald/ruby-git", "open_issues": 0, "stargazers_count": 4, "owner_id": 5578, "id": 130550, "size": 1294}, {"fork": true, "license": "MIT License", "has_wiki": false, "description": "Go toolchain for srclib", "language": "Go", "default_branch": "master", "created_at": "2015-02-25 15:06:55", "forks_count": 0, "updated_at": "2015-02-25 16:29:54", "pushed_at": "2015-02-25 16:29:53", "full_name": "peterwald/srclib-go", "open_issues": 0, "stargazers_count": 0, "owner_id": 5578, "id": 31319131, "size": 2281}, {"fork": true, "license": "Other", "has_wiki": true, "description": "Documentation for the Visual Studio Test Platform. ", "language": null, "default_branch": "master", "created_at": "2017-10-17 17:59:05", "forks_count": 0, "updated_at": "2017-10-13 16:54:11", "pushed_at": "2018-07-01 19:51:25", "full_name": "peterwald/vstest-docs", "open_issues": 0, "stargazers_count": 0, "owner_id": 5578, "id": 107304990, "size": 1247}, {"fork": true, "license": "MIT License", "has_wiki": true, "description": "Welcome editor thats shows on first run", "language": "CoffeeScript", "default_branch": "master", "created_at": "2014-02-26 13:09:31", "forks_count": 0, "updated_at": "2014-02-26 13:09:31", "pushed_at": "2014-02-26 05:32:21", "full_name": "peterwald/welcome", "open_issues": 0, "stargazers_count": 0, "owner_id": 5578, "id": 17210950, "size": 81}]}